// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/talent/v4beta1/filters.proto

package com.google.cloud.talent.v4beta1;

/**
 * <pre>
 * Filters to apply when performing the search query.
 * </pre>
 *
 * Protobuf type {@code google.cloud.talent.v4beta1.ProfileQuery}
 */
public final class ProfileQuery extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.talent.v4beta1.ProfileQuery)
    ProfileQueryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ProfileQuery.newBuilder() to construct.
  private ProfileQuery(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ProfileQuery() {
    query_ = "";
    locationFilters_ = java.util.Collections.emptyList();
    jobTitleFilters_ = java.util.Collections.emptyList();
    employerFilters_ = java.util.Collections.emptyList();
    educationFilters_ = java.util.Collections.emptyList();
    skillFilters_ = java.util.Collections.emptyList();
    workExperienceFilter_ = java.util.Collections.emptyList();
    timeFilters_ = java.util.Collections.emptyList();
    applicationDateFilters_ = java.util.Collections.emptyList();
    applicationOutcomeNotesFilters_ = java.util.Collections.emptyList();
    applicationJobFilters_ = java.util.Collections.emptyList();
    customAttributeFilter_ = "";
    availabilityFilters_ = java.util.Collections.emptyList();
    personNameFilters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ProfileQuery();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ProfileQuery(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            query_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              locationFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.LocationFilter>();
              mutable_bitField0_ |= 0x00000001;
            }
            locationFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.LocationFilter.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              jobTitleFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.JobTitleFilter>();
              mutable_bitField0_ |= 0x00000002;
            }
            jobTitleFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.JobTitleFilter.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              employerFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.EmployerFilter>();
              mutable_bitField0_ |= 0x00000004;
            }
            employerFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.EmployerFilter.parser(), extensionRegistry));
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              educationFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.EducationFilter>();
              mutable_bitField0_ |= 0x00000008;
            }
            educationFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.EducationFilter.parser(), extensionRegistry));
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              skillFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.SkillFilter>();
              mutable_bitField0_ |= 0x00000010;
            }
            skillFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.SkillFilter.parser(), extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              workExperienceFilter_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.WorkExperienceFilter>();
              mutable_bitField0_ |= 0x00000020;
            }
            workExperienceFilter_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.WorkExperienceFilter.parser(), extensionRegistry));
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              timeFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.TimeFilter>();
              mutable_bitField0_ |= 0x00000040;
            }
            timeFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.TimeFilter.parser(), extensionRegistry));
            break;
          }
          case 74: {
            com.google.protobuf.BoolValue.Builder subBuilder = null;
            if (hirableFilter_ != null) {
              subBuilder = hirableFilter_.toBuilder();
            }
            hirableFilter_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hirableFilter_);
              hirableFilter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              applicationDateFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationDateFilter>();
              mutable_bitField0_ |= 0x00000080;
            }
            applicationDateFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.ApplicationDateFilter.parser(), extensionRegistry));
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000100) != 0)) {
              applicationOutcomeNotesFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter>();
              mutable_bitField0_ |= 0x00000100;
            }
            applicationOutcomeNotesFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.parser(), extensionRegistry));
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00000200) != 0)) {
              applicationJobFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationJobFilter>();
              mutable_bitField0_ |= 0x00000200;
            }
            applicationJobFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.ApplicationJobFilter.parser(), extensionRegistry));
            break;
          }
          case 122: {
            java.lang.String s = input.readStringRequireUtf8();

            customAttributeFilter_ = s;
            break;
          }
          case 130: {
            com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder subBuilder = null;
            if (candidateAvailabilityFilter_ != null) {
              subBuilder = candidateAvailabilityFilter_.toBuilder();
            }
            candidateAvailabilityFilter_ = input.readMessage(com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(candidateAvailabilityFilter_);
              candidateAvailabilityFilter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 138: {
            if (!((mutable_bitField0_ & 0x00000800) != 0)) {
              personNameFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.PersonNameFilter>();
              mutable_bitField0_ |= 0x00000800;
            }
            personNameFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.PersonNameFilter.parser(), extensionRegistry));
            break;
          }
          case 146: {
            if (!((mutable_bitField0_ & 0x00000400) != 0)) {
              availabilityFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.AvailabilityFilter>();
              mutable_bitField0_ |= 0x00000400;
            }
            availabilityFilters_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.AvailabilityFilter.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        locationFilters_ = java.util.Collections.unmodifiableList(locationFilters_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        jobTitleFilters_ = java.util.Collections.unmodifiableList(jobTitleFilters_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        employerFilters_ = java.util.Collections.unmodifiableList(employerFilters_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        educationFilters_ = java.util.Collections.unmodifiableList(educationFilters_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        skillFilters_ = java.util.Collections.unmodifiableList(skillFilters_);
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        workExperienceFilter_ = java.util.Collections.unmodifiableList(workExperienceFilter_);
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        timeFilters_ = java.util.Collections.unmodifiableList(timeFilters_);
      }
      if (((mutable_bitField0_ & 0x00000080) != 0)) {
        applicationDateFilters_ = java.util.Collections.unmodifiableList(applicationDateFilters_);
      }
      if (((mutable_bitField0_ & 0x00000100) != 0)) {
        applicationOutcomeNotesFilters_ = java.util.Collections.unmodifiableList(applicationOutcomeNotesFilters_);
      }
      if (((mutable_bitField0_ & 0x00000200) != 0)) {
        applicationJobFilters_ = java.util.Collections.unmodifiableList(applicationJobFilters_);
      }
      if (((mutable_bitField0_ & 0x00000800) != 0)) {
        personNameFilters_ = java.util.Collections.unmodifiableList(personNameFilters_);
      }
      if (((mutable_bitField0_ & 0x00000400) != 0)) {
        availabilityFilters_ = java.util.Collections.unmodifiableList(availabilityFilters_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.talent.v4beta1.FiltersProto.internal_static_google_cloud_talent_v4beta1_ProfileQuery_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.talent.v4beta1.FiltersProto.internal_static_google_cloud_talent_v4beta1_ProfileQuery_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.talent.v4beta1.ProfileQuery.class, com.google.cloud.talent.v4beta1.ProfileQuery.Builder.class);
  }

  public static final int QUERY_FIELD_NUMBER = 1;
  private volatile java.lang.Object query_;
  /**
   * <pre>
   * Keywords to match any text fields of profiles.
   * For example, "software engineer in Palo Alto".
   * </pre>
   *
   * <code>string query = 1;</code>
   * @return The query.
   */
  @java.lang.Override
  public java.lang.String getQuery() {
    java.lang.Object ref = query_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      query_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Keywords to match any text fields of profiles.
   * For example, "software engineer in Palo Alto".
   * </pre>
   *
   * <code>string query = 1;</code>
   * @return The bytes for query.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getQueryBytes() {
    java.lang.Object ref = query_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      query_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCATION_FILTERS_FIELD_NUMBER = 2;
  private java.util.List<com.google.cloud.talent.v4beta1.LocationFilter> locationFilters_;
  /**
   * <pre>
   * The location filter specifies geo-regions containing the profiles to
   * search against.
   * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
   * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
   * The following logic is used to determine which locations in
   * the profile to filter against:
   * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
   * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 2. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 3. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
   * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
   * any of the above criteria will not be included in a search with location
   * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
   * location filter.
   * If a location filter isn't specified, profiles fitting the other search
   * criteria are retrieved regardless of where they're located.
   * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
   * profiles from that location.
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
   * point (latitude and longitude), and radius are automatically detected by
   * the Google Maps Geocoding API and included as well. If
   * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
   * falls back to keyword search.
   * If the detected
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
   * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
   * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
   * or
   * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
   * the filter is performed against the detected location name (using exact
   * text matching). Otherwise, the filter is performed against the detected
   * center point and a radius of detected location radius +
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
   * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
   * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
   * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
   * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
   * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
   * set to 0, the server will use the default value of
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
   * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
   * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
   * (such as 0.00001).
   * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.LocationFilter> getLocationFiltersList() {
    return locationFilters_;
  }
  /**
   * <pre>
   * The location filter specifies geo-regions containing the profiles to
   * search against.
   * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
   * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
   * The following logic is used to determine which locations in
   * the profile to filter against:
   * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
   * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 2. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 3. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
   * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
   * any of the above criteria will not be included in a search with location
   * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
   * location filter.
   * If a location filter isn't specified, profiles fitting the other search
   * criteria are retrieved regardless of where they're located.
   * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
   * profiles from that location.
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
   * point (latitude and longitude), and radius are automatically detected by
   * the Google Maps Geocoding API and included as well. If
   * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
   * falls back to keyword search.
   * If the detected
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
   * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
   * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
   * or
   * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
   * the filter is performed against the detected location name (using exact
   * text matching). Otherwise, the filter is performed against the detected
   * center point and a radius of detected location radius +
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
   * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
   * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
   * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
   * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
   * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
   * set to 0, the server will use the default value of
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
   * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
   * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
   * (such as 0.00001).
   * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.LocationFilterOrBuilder> 
      getLocationFiltersOrBuilderList() {
    return locationFilters_;
  }
  /**
   * <pre>
   * The location filter specifies geo-regions containing the profiles to
   * search against.
   * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
   * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
   * The following logic is used to determine which locations in
   * the profile to filter against:
   * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
   * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 2. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 3. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
   * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
   * any of the above criteria will not be included in a search with location
   * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
   * location filter.
   * If a location filter isn't specified, profiles fitting the other search
   * criteria are retrieved regardless of where they're located.
   * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
   * profiles from that location.
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
   * point (latitude and longitude), and radius are automatically detected by
   * the Google Maps Geocoding API and included as well. If
   * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
   * falls back to keyword search.
   * If the detected
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
   * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
   * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
   * or
   * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
   * the filter is performed against the detected location name (using exact
   * text matching). Otherwise, the filter is performed against the detected
   * center point and a radius of detected location radius +
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
   * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
   * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
   * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
   * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
   * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
   * set to 0, the server will use the default value of
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
   * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
   * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
   * (such as 0.00001).
   * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
   */
  @java.lang.Override
  public int getLocationFiltersCount() {
    return locationFilters_.size();
  }
  /**
   * <pre>
   * The location filter specifies geo-regions containing the profiles to
   * search against.
   * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
   * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
   * The following logic is used to determine which locations in
   * the profile to filter against:
   * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
   * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 2. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 3. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
   * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
   * any of the above criteria will not be included in a search with location
   * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
   * location filter.
   * If a location filter isn't specified, profiles fitting the other search
   * criteria are retrieved regardless of where they're located.
   * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
   * profiles from that location.
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
   * point (latitude and longitude), and radius are automatically detected by
   * the Google Maps Geocoding API and included as well. If
   * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
   * falls back to keyword search.
   * If the detected
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
   * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
   * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
   * or
   * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
   * the filter is performed against the detected location name (using exact
   * text matching). Otherwise, the filter is performed against the detected
   * center point and a radius of detected location radius +
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
   * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
   * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
   * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
   * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
   * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
   * set to 0, the server will use the default value of
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
   * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
   * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
   * (such as 0.00001).
   * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.LocationFilter getLocationFilters(int index) {
    return locationFilters_.get(index);
  }
  /**
   * <pre>
   * The location filter specifies geo-regions containing the profiles to
   * search against.
   * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
   * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
   * The following logic is used to determine which locations in
   * the profile to filter against:
   * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
   * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 2. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
   * 3. If the above set of locations is empty, all of the profile's geocoded
   * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
   * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
   * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
   * any of the above criteria will not be included in a search with location
   * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
   * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
   * location filter.
   * If a location filter isn't specified, profiles fitting the other search
   * criteria are retrieved regardless of where they're located.
   * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
   * profiles from that location.
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
   * point (latitude and longitude), and radius are automatically detected by
   * the Google Maps Geocoding API and included as well. If
   * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
   * falls back to keyword search.
   * If the detected
   * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
   * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
   * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
   * or
   * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
   * the filter is performed against the detected location name (using exact
   * text matching). Otherwise, the filter is performed against the detected
   * center point and a radius of detected location radius +
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
   * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
   * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
   * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
   * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
   * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
   * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
   * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
   * set to 0, the server will use the default value of
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
   * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
   * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
   * (such as 0.00001).
   * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.LocationFilterOrBuilder getLocationFiltersOrBuilder(
      int index) {
    return locationFilters_.get(index);
  }

  public static final int JOB_TITLE_FILTERS_FIELD_NUMBER = 3;
  private java.util.List<com.google.cloud.talent.v4beta1.JobTitleFilter> jobTitleFilters_;
  /**
   * <pre>
   * Job title filter specifies job titles of profiles to match on.
   * If a job title isn't specified, profiles with any titles are retrieved.
   * If multiple values are specified, profiles are retrieved with any of the
   * specified job titles.
   * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
   * profiles with the job titles.
   * For example, search for profiles with a job title "Product Manager".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.JobTitleFilter> getJobTitleFiltersList() {
    return jobTitleFilters_;
  }
  /**
   * <pre>
   * Job title filter specifies job titles of profiles to match on.
   * If a job title isn't specified, profiles with any titles are retrieved.
   * If multiple values are specified, profiles are retrieved with any of the
   * specified job titles.
   * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
   * profiles with the job titles.
   * For example, search for profiles with a job title "Product Manager".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder> 
      getJobTitleFiltersOrBuilderList() {
    return jobTitleFilters_;
  }
  /**
   * <pre>
   * Job title filter specifies job titles of profiles to match on.
   * If a job title isn't specified, profiles with any titles are retrieved.
   * If multiple values are specified, profiles are retrieved with any of the
   * specified job titles.
   * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
   * profiles with the job titles.
   * For example, search for profiles with a job title "Product Manager".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
   */
  @java.lang.Override
  public int getJobTitleFiltersCount() {
    return jobTitleFilters_.size();
  }
  /**
   * <pre>
   * Job title filter specifies job titles of profiles to match on.
   * If a job title isn't specified, profiles with any titles are retrieved.
   * If multiple values are specified, profiles are retrieved with any of the
   * specified job titles.
   * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
   * profiles with the job titles.
   * For example, search for profiles with a job title "Product Manager".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.JobTitleFilter getJobTitleFilters(int index) {
    return jobTitleFilters_.get(index);
  }
  /**
   * <pre>
   * Job title filter specifies job titles of profiles to match on.
   * If a job title isn't specified, profiles with any titles are retrieved.
   * If multiple values are specified, profiles are retrieved with any of the
   * specified job titles.
   * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
   * profiles with the job titles.
   * For example, search for profiles with a job title "Product Manager".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder getJobTitleFiltersOrBuilder(
      int index) {
    return jobTitleFilters_.get(index);
  }

  public static final int EMPLOYER_FILTERS_FIELD_NUMBER = 4;
  private java.util.List<com.google.cloud.talent.v4beta1.EmployerFilter> employerFilters_;
  /**
   * <pre>
   * Employer filter specifies employers of profiles to match on.
   * If an employer filter isn't specified, profiles with any employers are
   * retrieved.
   * If multiple employer filters are specified, profiles with any matching
   * employers are retrieved.
   * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
   * profiles that match the employers.
   * For example, search for profiles that have working experience at "Google
   * LLC".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.EmployerFilter> getEmployerFiltersList() {
    return employerFilters_;
  }
  /**
   * <pre>
   * Employer filter specifies employers of profiles to match on.
   * If an employer filter isn't specified, profiles with any employers are
   * retrieved.
   * If multiple employer filters are specified, profiles with any matching
   * employers are retrieved.
   * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
   * profiles that match the employers.
   * For example, search for profiles that have working experience at "Google
   * LLC".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder> 
      getEmployerFiltersOrBuilderList() {
    return employerFilters_;
  }
  /**
   * <pre>
   * Employer filter specifies employers of profiles to match on.
   * If an employer filter isn't specified, profiles with any employers are
   * retrieved.
   * If multiple employer filters are specified, profiles with any matching
   * employers are retrieved.
   * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
   * profiles that match the employers.
   * For example, search for profiles that have working experience at "Google
   * LLC".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
   */
  @java.lang.Override
  public int getEmployerFiltersCount() {
    return employerFilters_.size();
  }
  /**
   * <pre>
   * Employer filter specifies employers of profiles to match on.
   * If an employer filter isn't specified, profiles with any employers are
   * retrieved.
   * If multiple employer filters are specified, profiles with any matching
   * employers are retrieved.
   * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
   * profiles that match the employers.
   * For example, search for profiles that have working experience at "Google
   * LLC".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.EmployerFilter getEmployerFilters(int index) {
    return employerFilters_.get(index);
  }
  /**
   * <pre>
   * Employer filter specifies employers of profiles to match on.
   * If an employer filter isn't specified, profiles with any employers are
   * retrieved.
   * If multiple employer filters are specified, profiles with any matching
   * employers are retrieved.
   * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
   * profiles that match the employers.
   * For example, search for profiles that have working experience at "Google
   * LLC".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder getEmployerFiltersOrBuilder(
      int index) {
    return employerFilters_.get(index);
  }

  public static final int EDUCATION_FILTERS_FIELD_NUMBER = 5;
  private java.util.List<com.google.cloud.talent.v4beta1.EducationFilter> educationFilters_;
  /**
   * <pre>
   * Education filter specifies education of profiles to match on.
   * If an education filter isn't specified, profiles with any education are
   * retrieved.
   * If multiple education filters are specified, profiles that match any
   * education filters are retrieved.
   * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
   * profiles that match the educations.
   * For example, search for profiles with a master degree.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.EducationFilter> getEducationFiltersList() {
    return educationFilters_;
  }
  /**
   * <pre>
   * Education filter specifies education of profiles to match on.
   * If an education filter isn't specified, profiles with any education are
   * retrieved.
   * If multiple education filters are specified, profiles that match any
   * education filters are retrieved.
   * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
   * profiles that match the educations.
   * For example, search for profiles with a master degree.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.EducationFilterOrBuilder> 
      getEducationFiltersOrBuilderList() {
    return educationFilters_;
  }
  /**
   * <pre>
   * Education filter specifies education of profiles to match on.
   * If an education filter isn't specified, profiles with any education are
   * retrieved.
   * If multiple education filters are specified, profiles that match any
   * education filters are retrieved.
   * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
   * profiles that match the educations.
   * For example, search for profiles with a master degree.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
   */
  @java.lang.Override
  public int getEducationFiltersCount() {
    return educationFilters_.size();
  }
  /**
   * <pre>
   * Education filter specifies education of profiles to match on.
   * If an education filter isn't specified, profiles with any education are
   * retrieved.
   * If multiple education filters are specified, profiles that match any
   * education filters are retrieved.
   * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
   * profiles that match the educations.
   * For example, search for profiles with a master degree.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.EducationFilter getEducationFilters(int index) {
    return educationFilters_.get(index);
  }
  /**
   * <pre>
   * Education filter specifies education of profiles to match on.
   * If an education filter isn't specified, profiles with any education are
   * retrieved.
   * If multiple education filters are specified, profiles that match any
   * education filters are retrieved.
   * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
   * profiles that match the educations.
   * For example, search for profiles with a master degree.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.EducationFilterOrBuilder getEducationFiltersOrBuilder(
      int index) {
    return educationFilters_.get(index);
  }

  public static final int SKILL_FILTERS_FIELD_NUMBER = 6;
  private java.util.List<com.google.cloud.talent.v4beta1.SkillFilter> skillFilters_;
  /**
   * <pre>
   * Skill filter specifies skill of profiles to match on.
   * If a skill filter isn't specified, profiles with any skills are retrieved.
   * If multiple skill filters are specified, profiles that match any skill
   * filters are retrieved.
   * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
   * that match the skills.
   * For example, search for profiles that have "Java" and "Python" in skill
   * list.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.SkillFilter> getSkillFiltersList() {
    return skillFilters_;
  }
  /**
   * <pre>
   * Skill filter specifies skill of profiles to match on.
   * If a skill filter isn't specified, profiles with any skills are retrieved.
   * If multiple skill filters are specified, profiles that match any skill
   * filters are retrieved.
   * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
   * that match the skills.
   * For example, search for profiles that have "Java" and "Python" in skill
   * list.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.SkillFilterOrBuilder> 
      getSkillFiltersOrBuilderList() {
    return skillFilters_;
  }
  /**
   * <pre>
   * Skill filter specifies skill of profiles to match on.
   * If a skill filter isn't specified, profiles with any skills are retrieved.
   * If multiple skill filters are specified, profiles that match any skill
   * filters are retrieved.
   * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
   * that match the skills.
   * For example, search for profiles that have "Java" and "Python" in skill
   * list.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
   */
  @java.lang.Override
  public int getSkillFiltersCount() {
    return skillFilters_.size();
  }
  /**
   * <pre>
   * Skill filter specifies skill of profiles to match on.
   * If a skill filter isn't specified, profiles with any skills are retrieved.
   * If multiple skill filters are specified, profiles that match any skill
   * filters are retrieved.
   * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
   * that match the skills.
   * For example, search for profiles that have "Java" and "Python" in skill
   * list.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.SkillFilter getSkillFilters(int index) {
    return skillFilters_.get(index);
  }
  /**
   * <pre>
   * Skill filter specifies skill of profiles to match on.
   * If a skill filter isn't specified, profiles with any skills are retrieved.
   * If multiple skill filters are specified, profiles that match any skill
   * filters are retrieved.
   * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
   * that match the skills.
   * For example, search for profiles that have "Java" and "Python" in skill
   * list.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.SkillFilterOrBuilder getSkillFiltersOrBuilder(
      int index) {
    return skillFilters_.get(index);
  }

  public static final int WORK_EXPERIENCE_FILTER_FIELD_NUMBER = 7;
  private java.util.List<com.google.cloud.talent.v4beta1.WorkExperienceFilter> workExperienceFilter_;
  /**
   * <pre>
   * Work experience filter specifies the total working experience of profiles
   * to match on.
   * If a work experience filter isn't specified, profiles with any
   * professional experience are retrieved.
   * If multiple work experience filters are specified, profiles that match any
   * work experience filters are retrieved.
   * For example, search for profiles with 10 years of work experience.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.WorkExperienceFilter> getWorkExperienceFilterList() {
    return workExperienceFilter_;
  }
  /**
   * <pre>
   * Work experience filter specifies the total working experience of profiles
   * to match on.
   * If a work experience filter isn't specified, profiles with any
   * professional experience are retrieved.
   * If multiple work experience filters are specified, profiles that match any
   * work experience filters are retrieved.
   * For example, search for profiles with 10 years of work experience.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder> 
      getWorkExperienceFilterOrBuilderList() {
    return workExperienceFilter_;
  }
  /**
   * <pre>
   * Work experience filter specifies the total working experience of profiles
   * to match on.
   * If a work experience filter isn't specified, profiles with any
   * professional experience are retrieved.
   * If multiple work experience filters are specified, profiles that match any
   * work experience filters are retrieved.
   * For example, search for profiles with 10 years of work experience.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
   */
  @java.lang.Override
  public int getWorkExperienceFilterCount() {
    return workExperienceFilter_.size();
  }
  /**
   * <pre>
   * Work experience filter specifies the total working experience of profiles
   * to match on.
   * If a work experience filter isn't specified, profiles with any
   * professional experience are retrieved.
   * If multiple work experience filters are specified, profiles that match any
   * work experience filters are retrieved.
   * For example, search for profiles with 10 years of work experience.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.WorkExperienceFilter getWorkExperienceFilter(int index) {
    return workExperienceFilter_.get(index);
  }
  /**
   * <pre>
   * Work experience filter specifies the total working experience of profiles
   * to match on.
   * If a work experience filter isn't specified, profiles with any
   * professional experience are retrieved.
   * If multiple work experience filters are specified, profiles that match any
   * work experience filters are retrieved.
   * For example, search for profiles with 10 years of work experience.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder getWorkExperienceFilterOrBuilder(
      int index) {
    return workExperienceFilter_.get(index);
  }

  public static final int TIME_FILTERS_FIELD_NUMBER = 8;
  private java.util.List<com.google.cloud.talent.v4beta1.TimeFilter> timeFilters_;
  /**
   * <pre>
   * Time filter specifies the create/update timestamp of the profiles to match
   * on.
   * For example, search for profiles created since "2018-1-1".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.TimeFilter> getTimeFiltersList() {
    return timeFilters_;
  }
  /**
   * <pre>
   * Time filter specifies the create/update timestamp of the profiles to match
   * on.
   * For example, search for profiles created since "2018-1-1".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.TimeFilterOrBuilder> 
      getTimeFiltersOrBuilderList() {
    return timeFilters_;
  }
  /**
   * <pre>
   * Time filter specifies the create/update timestamp of the profiles to match
   * on.
   * For example, search for profiles created since "2018-1-1".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
   */
  @java.lang.Override
  public int getTimeFiltersCount() {
    return timeFilters_.size();
  }
  /**
   * <pre>
   * Time filter specifies the create/update timestamp of the profiles to match
   * on.
   * For example, search for profiles created since "2018-1-1".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.TimeFilter getTimeFilters(int index) {
    return timeFilters_.get(index);
  }
  /**
   * <pre>
   * Time filter specifies the create/update timestamp of the profiles to match
   * on.
   * For example, search for profiles created since "2018-1-1".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.TimeFilterOrBuilder getTimeFiltersOrBuilder(
      int index) {
    return timeFilters_.get(index);
  }

  public static final int HIRABLE_FILTER_FIELD_NUMBER = 9;
  private com.google.protobuf.BoolValue hirableFilter_;
  /**
   * <pre>
   * The hirable filter specifies the profile's hirable status to match on.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
   * @return Whether the hirableFilter field is set.
   */
  @java.lang.Override
  public boolean hasHirableFilter() {
    return hirableFilter_ != null;
  }
  /**
   * <pre>
   * The hirable filter specifies the profile's hirable status to match on.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
   * @return The hirableFilter.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getHirableFilter() {
    return hirableFilter_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : hirableFilter_;
  }
  /**
   * <pre>
   * The hirable filter specifies the profile's hirable status to match on.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getHirableFilterOrBuilder() {
    return getHirableFilter();
  }

  public static final int APPLICATION_DATE_FILTERS_FIELD_NUMBER = 10;
  private java.util.List<com.google.cloud.talent.v4beta1.ApplicationDateFilter> applicationDateFilters_;
  /**
   * <pre>
   * The application date filters specify application date ranges to match on.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.ApplicationDateFilter> getApplicationDateFiltersList() {
    return applicationDateFilters_;
  }
  /**
   * <pre>
   * The application date filters specify application date ranges to match on.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder> 
      getApplicationDateFiltersOrBuilderList() {
    return applicationDateFilters_;
  }
  /**
   * <pre>
   * The application date filters specify application date ranges to match on.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
   */
  @java.lang.Override
  public int getApplicationDateFiltersCount() {
    return applicationDateFilters_.size();
  }
  /**
   * <pre>
   * The application date filters specify application date ranges to match on.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationDateFilter getApplicationDateFilters(int index) {
    return applicationDateFilters_.get(index);
  }
  /**
   * <pre>
   * The application date filters specify application date ranges to match on.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder getApplicationDateFiltersOrBuilder(
      int index) {
    return applicationDateFilters_.get(index);
  }

  public static final int APPLICATION_OUTCOME_NOTES_FILTERS_FIELD_NUMBER = 11;
  private java.util.List<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter> applicationOutcomeNotesFilters_;
  /**
   * <pre>
   * The application outcome notes filters specify the notes for the outcome of
   * the job application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter> getApplicationOutcomeNotesFiltersList() {
    return applicationOutcomeNotesFilters_;
  }
  /**
   * <pre>
   * The application outcome notes filters specify the notes for the outcome of
   * the job application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder> 
      getApplicationOutcomeNotesFiltersOrBuilderList() {
    return applicationOutcomeNotesFilters_;
  }
  /**
   * <pre>
   * The application outcome notes filters specify the notes for the outcome of
   * the job application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
   */
  @java.lang.Override
  public int getApplicationOutcomeNotesFiltersCount() {
    return applicationOutcomeNotesFilters_.size();
  }
  /**
   * <pre>
   * The application outcome notes filters specify the notes for the outcome of
   * the job application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter getApplicationOutcomeNotesFilters(int index) {
    return applicationOutcomeNotesFilters_.get(index);
  }
  /**
   * <pre>
   * The application outcome notes filters specify the notes for the outcome of
   * the job application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder getApplicationOutcomeNotesFiltersOrBuilder(
      int index) {
    return applicationOutcomeNotesFilters_.get(index);
  }

  public static final int APPLICATION_JOB_FILTERS_FIELD_NUMBER = 13;
  private java.util.List<com.google.cloud.talent.v4beta1.ApplicationJobFilter> applicationJobFilters_;
  /**
   * <pre>
   * The application job filters specify the job applied for in the application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.ApplicationJobFilter> getApplicationJobFiltersList() {
    return applicationJobFilters_;
  }
  /**
   * <pre>
   * The application job filters specify the job applied for in the application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder> 
      getApplicationJobFiltersOrBuilderList() {
    return applicationJobFilters_;
  }
  /**
   * <pre>
   * The application job filters specify the job applied for in the application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
   */
  @java.lang.Override
  public int getApplicationJobFiltersCount() {
    return applicationJobFilters_.size();
  }
  /**
   * <pre>
   * The application job filters specify the job applied for in the application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationJobFilter getApplicationJobFilters(int index) {
    return applicationJobFilters_.get(index);
  }
  /**
   * <pre>
   * The application job filters specify the job applied for in the application.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder getApplicationJobFiltersOrBuilder(
      int index) {
    return applicationJobFilters_.get(index);
  }

  public static final int CUSTOM_ATTRIBUTE_FILTER_FIELD_NUMBER = 15;
  private volatile java.lang.Object customAttributeFilter_;
  /**
   * <pre>
   * This filter specifies a structured syntax to match against the
   * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
   * The syntax for this expression is a subset of Google SQL syntax.
   * String custom attributes: supported operators are =, != where the left of
   * the operator is a custom field key and the right of the operator is a
   * string (surrounded by quotes) value.
   * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
   * operators where the left of the operator is a custom field key and the
   * right of the operator is a numeric value.
   * Supported functions are LOWER(&lt;field_name&gt;) to
   * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
   * existence of a key.
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
   * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
   * a maximum of 50 comparisons/functions in the expression. The expression
   * must be &lt; 2000 characters in length.
   * Sample Query:
   * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
   * </pre>
   *
   * <code>string custom_attribute_filter = 15;</code>
   * @return The customAttributeFilter.
   */
  @java.lang.Override
  public java.lang.String getCustomAttributeFilter() {
    java.lang.Object ref = customAttributeFilter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      customAttributeFilter_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * This filter specifies a structured syntax to match against the
   * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
   * The syntax for this expression is a subset of Google SQL syntax.
   * String custom attributes: supported operators are =, != where the left of
   * the operator is a custom field key and the right of the operator is a
   * string (surrounded by quotes) value.
   * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
   * operators where the left of the operator is a custom field key and the
   * right of the operator is a numeric value.
   * Supported functions are LOWER(&lt;field_name&gt;) to
   * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
   * existence of a key.
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
   * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
   * a maximum of 50 comparisons/functions in the expression. The expression
   * must be &lt; 2000 characters in length.
   * Sample Query:
   * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
   * </pre>
   *
   * <code>string custom_attribute_filter = 15;</code>
   * @return The bytes for customAttributeFilter.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCustomAttributeFilterBytes() {
    java.lang.Object ref = customAttributeFilter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      customAttributeFilter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CANDIDATE_AVAILABILITY_FILTER_FIELD_NUMBER = 16;
  private com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidateAvailabilityFilter_;
  /**
   * <pre>
   * Deprecated. Use availability_filters instead.
   * The candidate availability filter which filters based on availability
   * signals.
   * Signal 1: Number of days since most recent job application.  See
   * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
   * signal.
   * Signal 2: Number of days since last profile update. See
   * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
   * for the details of this signal.
   * The candidate availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
   * @return Whether the candidateAvailabilityFilter field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasCandidateAvailabilityFilter() {
    return candidateAvailabilityFilter_ != null;
  }
  /**
   * <pre>
   * Deprecated. Use availability_filters instead.
   * The candidate availability filter which filters based on availability
   * signals.
   * Signal 1: Number of days since most recent job application.  See
   * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
   * signal.
   * Signal 2: Number of days since last profile update. See
   * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
   * for the details of this signal.
   * The candidate availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
   * @return The candidateAvailabilityFilter.
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter getCandidateAvailabilityFilter() {
    return candidateAvailabilityFilter_ == null ? com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.getDefaultInstance() : candidateAvailabilityFilter_;
  }
  /**
   * <pre>
   * Deprecated. Use availability_filters instead.
   * The candidate availability filter which filters based on availability
   * signals.
   * Signal 1: Number of days since most recent job application.  See
   * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
   * signal.
   * Signal 2: Number of days since last profile update. See
   * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
   * for the details of this signal.
   * The candidate availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.cloud.talent.v4beta1.CandidateAvailabilityFilterOrBuilder getCandidateAvailabilityFilterOrBuilder() {
    return getCandidateAvailabilityFilter();
  }

  public static final int AVAILABILITY_FILTERS_FIELD_NUMBER = 18;
  private java.util.List<com.google.cloud.talent.v4beta1.AvailabilityFilter> availabilityFilters_;
  /**
   * <pre>
   * The availability filter which filters based on
   * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
   * The availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
   * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
   * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
   * an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.AvailabilityFilter> getAvailabilityFiltersList() {
    return availabilityFilters_;
  }
  /**
   * <pre>
   * The availability filter which filters based on
   * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
   * The availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
   * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
   * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
   * an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder> 
      getAvailabilityFiltersOrBuilderList() {
    return availabilityFilters_;
  }
  /**
   * <pre>
   * The availability filter which filters based on
   * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
   * The availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
   * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
   * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
   * an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
   */
  @java.lang.Override
  public int getAvailabilityFiltersCount() {
    return availabilityFilters_.size();
  }
  /**
   * <pre>
   * The availability filter which filters based on
   * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
   * The availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
   * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
   * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
   * an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.AvailabilityFilter getAvailabilityFilters(int index) {
    return availabilityFilters_.get(index);
  }
  /**
   * <pre>
   * The availability filter which filters based on
   * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
   * The availability filter helps a recruiter understand if a
   * specific candidate is likely to be actively seeking new job opportunities
   * based on an aggregated set of signals.  Specifically, the intent is NOT to
   * indicate the candidate's potential qualification / interest / close ability
   * for a specific job.
   * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
   * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
   * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
   * an error is thrown.
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder getAvailabilityFiltersOrBuilder(
      int index) {
    return availabilityFilters_.get(index);
  }

  public static final int PERSON_NAME_FILTERS_FIELD_NUMBER = 17;
  private java.util.List<com.google.cloud.talent.v4beta1.PersonNameFilter> personNameFilters_;
  /**
   * <pre>
   * Person name filter specifies person name of profiles to match on.
   * If multiple person name filters are specified, profiles that match any
   * person name filters are retrieved.
   * For example, search for profiles of candidates with name "John Smith".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.PersonNameFilter> getPersonNameFiltersList() {
    return personNameFilters_;
  }
  /**
   * <pre>
   * Person name filter specifies person name of profiles to match on.
   * If multiple person name filters are specified, profiles that match any
   * person name filters are retrieved.
   * For example, search for profiles of candidates with name "John Smith".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder> 
      getPersonNameFiltersOrBuilderList() {
    return personNameFilters_;
  }
  /**
   * <pre>
   * Person name filter specifies person name of profiles to match on.
   * If multiple person name filters are specified, profiles that match any
   * person name filters are retrieved.
   * For example, search for profiles of candidates with name "John Smith".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
   */
  @java.lang.Override
  public int getPersonNameFiltersCount() {
    return personNameFilters_.size();
  }
  /**
   * <pre>
   * Person name filter specifies person name of profiles to match on.
   * If multiple person name filters are specified, profiles that match any
   * person name filters are retrieved.
   * For example, search for profiles of candidates with name "John Smith".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.PersonNameFilter getPersonNameFilters(int index) {
    return personNameFilters_.get(index);
  }
  /**
   * <pre>
   * Person name filter specifies person name of profiles to match on.
   * If multiple person name filters are specified, profiles that match any
   * person name filters are retrieved.
   * For example, search for profiles of candidates with name "John Smith".
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder getPersonNameFiltersOrBuilder(
      int index) {
    return personNameFilters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getQueryBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, query_);
    }
    for (int i = 0; i < locationFilters_.size(); i++) {
      output.writeMessage(2, locationFilters_.get(i));
    }
    for (int i = 0; i < jobTitleFilters_.size(); i++) {
      output.writeMessage(3, jobTitleFilters_.get(i));
    }
    for (int i = 0; i < employerFilters_.size(); i++) {
      output.writeMessage(4, employerFilters_.get(i));
    }
    for (int i = 0; i < educationFilters_.size(); i++) {
      output.writeMessage(5, educationFilters_.get(i));
    }
    for (int i = 0; i < skillFilters_.size(); i++) {
      output.writeMessage(6, skillFilters_.get(i));
    }
    for (int i = 0; i < workExperienceFilter_.size(); i++) {
      output.writeMessage(7, workExperienceFilter_.get(i));
    }
    for (int i = 0; i < timeFilters_.size(); i++) {
      output.writeMessage(8, timeFilters_.get(i));
    }
    if (hirableFilter_ != null) {
      output.writeMessage(9, getHirableFilter());
    }
    for (int i = 0; i < applicationDateFilters_.size(); i++) {
      output.writeMessage(10, applicationDateFilters_.get(i));
    }
    for (int i = 0; i < applicationOutcomeNotesFilters_.size(); i++) {
      output.writeMessage(11, applicationOutcomeNotesFilters_.get(i));
    }
    for (int i = 0; i < applicationJobFilters_.size(); i++) {
      output.writeMessage(13, applicationJobFilters_.get(i));
    }
    if (!getCustomAttributeFilterBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 15, customAttributeFilter_);
    }
    if (candidateAvailabilityFilter_ != null) {
      output.writeMessage(16, getCandidateAvailabilityFilter());
    }
    for (int i = 0; i < personNameFilters_.size(); i++) {
      output.writeMessage(17, personNameFilters_.get(i));
    }
    for (int i = 0; i < availabilityFilters_.size(); i++) {
      output.writeMessage(18, availabilityFilters_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getQueryBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, query_);
    }
    for (int i = 0; i < locationFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, locationFilters_.get(i));
    }
    for (int i = 0; i < jobTitleFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, jobTitleFilters_.get(i));
    }
    for (int i = 0; i < employerFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, employerFilters_.get(i));
    }
    for (int i = 0; i < educationFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, educationFilters_.get(i));
    }
    for (int i = 0; i < skillFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, skillFilters_.get(i));
    }
    for (int i = 0; i < workExperienceFilter_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, workExperienceFilter_.get(i));
    }
    for (int i = 0; i < timeFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, timeFilters_.get(i));
    }
    if (hirableFilter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getHirableFilter());
    }
    for (int i = 0; i < applicationDateFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, applicationDateFilters_.get(i));
    }
    for (int i = 0; i < applicationOutcomeNotesFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, applicationOutcomeNotesFilters_.get(i));
    }
    for (int i = 0; i < applicationJobFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, applicationJobFilters_.get(i));
    }
    if (!getCustomAttributeFilterBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, customAttributeFilter_);
    }
    if (candidateAvailabilityFilter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getCandidateAvailabilityFilter());
    }
    for (int i = 0; i < personNameFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, personNameFilters_.get(i));
    }
    for (int i = 0; i < availabilityFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, availabilityFilters_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.talent.v4beta1.ProfileQuery)) {
      return super.equals(obj);
    }
    com.google.cloud.talent.v4beta1.ProfileQuery other = (com.google.cloud.talent.v4beta1.ProfileQuery) obj;

    if (!getQuery()
        .equals(other.getQuery())) return false;
    if (!getLocationFiltersList()
        .equals(other.getLocationFiltersList())) return false;
    if (!getJobTitleFiltersList()
        .equals(other.getJobTitleFiltersList())) return false;
    if (!getEmployerFiltersList()
        .equals(other.getEmployerFiltersList())) return false;
    if (!getEducationFiltersList()
        .equals(other.getEducationFiltersList())) return false;
    if (!getSkillFiltersList()
        .equals(other.getSkillFiltersList())) return false;
    if (!getWorkExperienceFilterList()
        .equals(other.getWorkExperienceFilterList())) return false;
    if (!getTimeFiltersList()
        .equals(other.getTimeFiltersList())) return false;
    if (hasHirableFilter() != other.hasHirableFilter()) return false;
    if (hasHirableFilter()) {
      if (!getHirableFilter()
          .equals(other.getHirableFilter())) return false;
    }
    if (!getApplicationDateFiltersList()
        .equals(other.getApplicationDateFiltersList())) return false;
    if (!getApplicationOutcomeNotesFiltersList()
        .equals(other.getApplicationOutcomeNotesFiltersList())) return false;
    if (!getApplicationJobFiltersList()
        .equals(other.getApplicationJobFiltersList())) return false;
    if (!getCustomAttributeFilter()
        .equals(other.getCustomAttributeFilter())) return false;
    if (hasCandidateAvailabilityFilter() != other.hasCandidateAvailabilityFilter()) return false;
    if (hasCandidateAvailabilityFilter()) {
      if (!getCandidateAvailabilityFilter()
          .equals(other.getCandidateAvailabilityFilter())) return false;
    }
    if (!getAvailabilityFiltersList()
        .equals(other.getAvailabilityFiltersList())) return false;
    if (!getPersonNameFiltersList()
        .equals(other.getPersonNameFiltersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + QUERY_FIELD_NUMBER;
    hash = (53 * hash) + getQuery().hashCode();
    if (getLocationFiltersCount() > 0) {
      hash = (37 * hash) + LOCATION_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getLocationFiltersList().hashCode();
    }
    if (getJobTitleFiltersCount() > 0) {
      hash = (37 * hash) + JOB_TITLE_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getJobTitleFiltersList().hashCode();
    }
    if (getEmployerFiltersCount() > 0) {
      hash = (37 * hash) + EMPLOYER_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getEmployerFiltersList().hashCode();
    }
    if (getEducationFiltersCount() > 0) {
      hash = (37 * hash) + EDUCATION_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getEducationFiltersList().hashCode();
    }
    if (getSkillFiltersCount() > 0) {
      hash = (37 * hash) + SKILL_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getSkillFiltersList().hashCode();
    }
    if (getWorkExperienceFilterCount() > 0) {
      hash = (37 * hash) + WORK_EXPERIENCE_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getWorkExperienceFilterList().hashCode();
    }
    if (getTimeFiltersCount() > 0) {
      hash = (37 * hash) + TIME_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getTimeFiltersList().hashCode();
    }
    if (hasHirableFilter()) {
      hash = (37 * hash) + HIRABLE_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getHirableFilter().hashCode();
    }
    if (getApplicationDateFiltersCount() > 0) {
      hash = (37 * hash) + APPLICATION_DATE_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getApplicationDateFiltersList().hashCode();
    }
    if (getApplicationOutcomeNotesFiltersCount() > 0) {
      hash = (37 * hash) + APPLICATION_OUTCOME_NOTES_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getApplicationOutcomeNotesFiltersList().hashCode();
    }
    if (getApplicationJobFiltersCount() > 0) {
      hash = (37 * hash) + APPLICATION_JOB_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getApplicationJobFiltersList().hashCode();
    }
    hash = (37 * hash) + CUSTOM_ATTRIBUTE_FILTER_FIELD_NUMBER;
    hash = (53 * hash) + getCustomAttributeFilter().hashCode();
    if (hasCandidateAvailabilityFilter()) {
      hash = (37 * hash) + CANDIDATE_AVAILABILITY_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getCandidateAvailabilityFilter().hashCode();
    }
    if (getAvailabilityFiltersCount() > 0) {
      hash = (37 * hash) + AVAILABILITY_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getAvailabilityFiltersList().hashCode();
    }
    if (getPersonNameFiltersCount() > 0) {
      hash = (37 * hash) + PERSON_NAME_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getPersonNameFiltersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.ProfileQuery parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.talent.v4beta1.ProfileQuery prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Filters to apply when performing the search query.
   * </pre>
   *
   * Protobuf type {@code google.cloud.talent.v4beta1.ProfileQuery}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.talent.v4beta1.ProfileQuery)
      com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.talent.v4beta1.FiltersProto.internal_static_google_cloud_talent_v4beta1_ProfileQuery_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.talent.v4beta1.FiltersProto.internal_static_google_cloud_talent_v4beta1_ProfileQuery_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.talent.v4beta1.ProfileQuery.class, com.google.cloud.talent.v4beta1.ProfileQuery.Builder.class);
    }

    // Construct using com.google.cloud.talent.v4beta1.ProfileQuery.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLocationFiltersFieldBuilder();
        getJobTitleFiltersFieldBuilder();
        getEmployerFiltersFieldBuilder();
        getEducationFiltersFieldBuilder();
        getSkillFiltersFieldBuilder();
        getWorkExperienceFilterFieldBuilder();
        getTimeFiltersFieldBuilder();
        getApplicationDateFiltersFieldBuilder();
        getApplicationOutcomeNotesFiltersFieldBuilder();
        getApplicationJobFiltersFieldBuilder();
        getAvailabilityFiltersFieldBuilder();
        getPersonNameFiltersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      query_ = "";

      if (locationFiltersBuilder_ == null) {
        locationFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        locationFiltersBuilder_.clear();
      }
      if (jobTitleFiltersBuilder_ == null) {
        jobTitleFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        jobTitleFiltersBuilder_.clear();
      }
      if (employerFiltersBuilder_ == null) {
        employerFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        employerFiltersBuilder_.clear();
      }
      if (educationFiltersBuilder_ == null) {
        educationFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        educationFiltersBuilder_.clear();
      }
      if (skillFiltersBuilder_ == null) {
        skillFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        skillFiltersBuilder_.clear();
      }
      if (workExperienceFilterBuilder_ == null) {
        workExperienceFilter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
      } else {
        workExperienceFilterBuilder_.clear();
      }
      if (timeFiltersBuilder_ == null) {
        timeFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
      } else {
        timeFiltersBuilder_.clear();
      }
      if (hirableFilterBuilder_ == null) {
        hirableFilter_ = null;
      } else {
        hirableFilter_ = null;
        hirableFilterBuilder_ = null;
      }
      if (applicationDateFiltersBuilder_ == null) {
        applicationDateFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
      } else {
        applicationDateFiltersBuilder_.clear();
      }
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        applicationOutcomeNotesFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
      } else {
        applicationOutcomeNotesFiltersBuilder_.clear();
      }
      if (applicationJobFiltersBuilder_ == null) {
        applicationJobFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
      } else {
        applicationJobFiltersBuilder_.clear();
      }
      customAttributeFilter_ = "";

      if (candidateAvailabilityFilterBuilder_ == null) {
        candidateAvailabilityFilter_ = null;
      } else {
        candidateAvailabilityFilter_ = null;
        candidateAvailabilityFilterBuilder_ = null;
      }
      if (availabilityFiltersBuilder_ == null) {
        availabilityFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
      } else {
        availabilityFiltersBuilder_.clear();
      }
      if (personNameFiltersBuilder_ == null) {
        personNameFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
      } else {
        personNameFiltersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.talent.v4beta1.FiltersProto.internal_static_google_cloud_talent_v4beta1_ProfileQuery_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.ProfileQuery getDefaultInstanceForType() {
      return com.google.cloud.talent.v4beta1.ProfileQuery.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.ProfileQuery build() {
      com.google.cloud.talent.v4beta1.ProfileQuery result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.ProfileQuery buildPartial() {
      com.google.cloud.talent.v4beta1.ProfileQuery result = new com.google.cloud.talent.v4beta1.ProfileQuery(this);
      int from_bitField0_ = bitField0_;
      result.query_ = query_;
      if (locationFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          locationFilters_ = java.util.Collections.unmodifiableList(locationFilters_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.locationFilters_ = locationFilters_;
      } else {
        result.locationFilters_ = locationFiltersBuilder_.build();
      }
      if (jobTitleFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          jobTitleFilters_ = java.util.Collections.unmodifiableList(jobTitleFilters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.jobTitleFilters_ = jobTitleFilters_;
      } else {
        result.jobTitleFilters_ = jobTitleFiltersBuilder_.build();
      }
      if (employerFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          employerFilters_ = java.util.Collections.unmodifiableList(employerFilters_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.employerFilters_ = employerFilters_;
      } else {
        result.employerFilters_ = employerFiltersBuilder_.build();
      }
      if (educationFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          educationFilters_ = java.util.Collections.unmodifiableList(educationFilters_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.educationFilters_ = educationFilters_;
      } else {
        result.educationFilters_ = educationFiltersBuilder_.build();
      }
      if (skillFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          skillFilters_ = java.util.Collections.unmodifiableList(skillFilters_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.skillFilters_ = skillFilters_;
      } else {
        result.skillFilters_ = skillFiltersBuilder_.build();
      }
      if (workExperienceFilterBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          workExperienceFilter_ = java.util.Collections.unmodifiableList(workExperienceFilter_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.workExperienceFilter_ = workExperienceFilter_;
      } else {
        result.workExperienceFilter_ = workExperienceFilterBuilder_.build();
      }
      if (timeFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          timeFilters_ = java.util.Collections.unmodifiableList(timeFilters_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.timeFilters_ = timeFilters_;
      } else {
        result.timeFilters_ = timeFiltersBuilder_.build();
      }
      if (hirableFilterBuilder_ == null) {
        result.hirableFilter_ = hirableFilter_;
      } else {
        result.hirableFilter_ = hirableFilterBuilder_.build();
      }
      if (applicationDateFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)) {
          applicationDateFilters_ = java.util.Collections.unmodifiableList(applicationDateFilters_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.applicationDateFilters_ = applicationDateFilters_;
      } else {
        result.applicationDateFilters_ = applicationDateFiltersBuilder_.build();
      }
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0)) {
          applicationOutcomeNotesFilters_ = java.util.Collections.unmodifiableList(applicationOutcomeNotesFilters_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.applicationOutcomeNotesFilters_ = applicationOutcomeNotesFilters_;
      } else {
        result.applicationOutcomeNotesFilters_ = applicationOutcomeNotesFiltersBuilder_.build();
      }
      if (applicationJobFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0)) {
          applicationJobFilters_ = java.util.Collections.unmodifiableList(applicationJobFilters_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.applicationJobFilters_ = applicationJobFilters_;
      } else {
        result.applicationJobFilters_ = applicationJobFiltersBuilder_.build();
      }
      result.customAttributeFilter_ = customAttributeFilter_;
      if (candidateAvailabilityFilterBuilder_ == null) {
        result.candidateAvailabilityFilter_ = candidateAvailabilityFilter_;
      } else {
        result.candidateAvailabilityFilter_ = candidateAvailabilityFilterBuilder_.build();
      }
      if (availabilityFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0)) {
          availabilityFilters_ = java.util.Collections.unmodifiableList(availabilityFilters_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.availabilityFilters_ = availabilityFilters_;
      } else {
        result.availabilityFilters_ = availabilityFiltersBuilder_.build();
      }
      if (personNameFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0)) {
          personNameFilters_ = java.util.Collections.unmodifiableList(personNameFilters_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.personNameFilters_ = personNameFilters_;
      } else {
        result.personNameFilters_ = personNameFiltersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.talent.v4beta1.ProfileQuery) {
        return mergeFrom((com.google.cloud.talent.v4beta1.ProfileQuery)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.talent.v4beta1.ProfileQuery other) {
      if (other == com.google.cloud.talent.v4beta1.ProfileQuery.getDefaultInstance()) return this;
      if (!other.getQuery().isEmpty()) {
        query_ = other.query_;
        onChanged();
      }
      if (locationFiltersBuilder_ == null) {
        if (!other.locationFilters_.isEmpty()) {
          if (locationFilters_.isEmpty()) {
            locationFilters_ = other.locationFilters_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLocationFiltersIsMutable();
            locationFilters_.addAll(other.locationFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.locationFilters_.isEmpty()) {
          if (locationFiltersBuilder_.isEmpty()) {
            locationFiltersBuilder_.dispose();
            locationFiltersBuilder_ = null;
            locationFilters_ = other.locationFilters_;
            bitField0_ = (bitField0_ & ~0x00000001);
            locationFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLocationFiltersFieldBuilder() : null;
          } else {
            locationFiltersBuilder_.addAllMessages(other.locationFilters_);
          }
        }
      }
      if (jobTitleFiltersBuilder_ == null) {
        if (!other.jobTitleFilters_.isEmpty()) {
          if (jobTitleFilters_.isEmpty()) {
            jobTitleFilters_ = other.jobTitleFilters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureJobTitleFiltersIsMutable();
            jobTitleFilters_.addAll(other.jobTitleFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.jobTitleFilters_.isEmpty()) {
          if (jobTitleFiltersBuilder_.isEmpty()) {
            jobTitleFiltersBuilder_.dispose();
            jobTitleFiltersBuilder_ = null;
            jobTitleFilters_ = other.jobTitleFilters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            jobTitleFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getJobTitleFiltersFieldBuilder() : null;
          } else {
            jobTitleFiltersBuilder_.addAllMessages(other.jobTitleFilters_);
          }
        }
      }
      if (employerFiltersBuilder_ == null) {
        if (!other.employerFilters_.isEmpty()) {
          if (employerFilters_.isEmpty()) {
            employerFilters_ = other.employerFilters_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureEmployerFiltersIsMutable();
            employerFilters_.addAll(other.employerFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.employerFilters_.isEmpty()) {
          if (employerFiltersBuilder_.isEmpty()) {
            employerFiltersBuilder_.dispose();
            employerFiltersBuilder_ = null;
            employerFilters_ = other.employerFilters_;
            bitField0_ = (bitField0_ & ~0x00000004);
            employerFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEmployerFiltersFieldBuilder() : null;
          } else {
            employerFiltersBuilder_.addAllMessages(other.employerFilters_);
          }
        }
      }
      if (educationFiltersBuilder_ == null) {
        if (!other.educationFilters_.isEmpty()) {
          if (educationFilters_.isEmpty()) {
            educationFilters_ = other.educationFilters_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureEducationFiltersIsMutable();
            educationFilters_.addAll(other.educationFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.educationFilters_.isEmpty()) {
          if (educationFiltersBuilder_.isEmpty()) {
            educationFiltersBuilder_.dispose();
            educationFiltersBuilder_ = null;
            educationFilters_ = other.educationFilters_;
            bitField0_ = (bitField0_ & ~0x00000008);
            educationFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEducationFiltersFieldBuilder() : null;
          } else {
            educationFiltersBuilder_.addAllMessages(other.educationFilters_);
          }
        }
      }
      if (skillFiltersBuilder_ == null) {
        if (!other.skillFilters_.isEmpty()) {
          if (skillFilters_.isEmpty()) {
            skillFilters_ = other.skillFilters_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSkillFiltersIsMutable();
            skillFilters_.addAll(other.skillFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.skillFilters_.isEmpty()) {
          if (skillFiltersBuilder_.isEmpty()) {
            skillFiltersBuilder_.dispose();
            skillFiltersBuilder_ = null;
            skillFilters_ = other.skillFilters_;
            bitField0_ = (bitField0_ & ~0x00000010);
            skillFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSkillFiltersFieldBuilder() : null;
          } else {
            skillFiltersBuilder_.addAllMessages(other.skillFilters_);
          }
        }
      }
      if (workExperienceFilterBuilder_ == null) {
        if (!other.workExperienceFilter_.isEmpty()) {
          if (workExperienceFilter_.isEmpty()) {
            workExperienceFilter_ = other.workExperienceFilter_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureWorkExperienceFilterIsMutable();
            workExperienceFilter_.addAll(other.workExperienceFilter_);
          }
          onChanged();
        }
      } else {
        if (!other.workExperienceFilter_.isEmpty()) {
          if (workExperienceFilterBuilder_.isEmpty()) {
            workExperienceFilterBuilder_.dispose();
            workExperienceFilterBuilder_ = null;
            workExperienceFilter_ = other.workExperienceFilter_;
            bitField0_ = (bitField0_ & ~0x00000020);
            workExperienceFilterBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getWorkExperienceFilterFieldBuilder() : null;
          } else {
            workExperienceFilterBuilder_.addAllMessages(other.workExperienceFilter_);
          }
        }
      }
      if (timeFiltersBuilder_ == null) {
        if (!other.timeFilters_.isEmpty()) {
          if (timeFilters_.isEmpty()) {
            timeFilters_ = other.timeFilters_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureTimeFiltersIsMutable();
            timeFilters_.addAll(other.timeFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.timeFilters_.isEmpty()) {
          if (timeFiltersBuilder_.isEmpty()) {
            timeFiltersBuilder_.dispose();
            timeFiltersBuilder_ = null;
            timeFilters_ = other.timeFilters_;
            bitField0_ = (bitField0_ & ~0x00000040);
            timeFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTimeFiltersFieldBuilder() : null;
          } else {
            timeFiltersBuilder_.addAllMessages(other.timeFilters_);
          }
        }
      }
      if (other.hasHirableFilter()) {
        mergeHirableFilter(other.getHirableFilter());
      }
      if (applicationDateFiltersBuilder_ == null) {
        if (!other.applicationDateFilters_.isEmpty()) {
          if (applicationDateFilters_.isEmpty()) {
            applicationDateFilters_ = other.applicationDateFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureApplicationDateFiltersIsMutable();
            applicationDateFilters_.addAll(other.applicationDateFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.applicationDateFilters_.isEmpty()) {
          if (applicationDateFiltersBuilder_.isEmpty()) {
            applicationDateFiltersBuilder_.dispose();
            applicationDateFiltersBuilder_ = null;
            applicationDateFilters_ = other.applicationDateFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
            applicationDateFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getApplicationDateFiltersFieldBuilder() : null;
          } else {
            applicationDateFiltersBuilder_.addAllMessages(other.applicationDateFilters_);
          }
        }
      }
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        if (!other.applicationOutcomeNotesFilters_.isEmpty()) {
          if (applicationOutcomeNotesFilters_.isEmpty()) {
            applicationOutcomeNotesFilters_ = other.applicationOutcomeNotesFilters_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureApplicationOutcomeNotesFiltersIsMutable();
            applicationOutcomeNotesFilters_.addAll(other.applicationOutcomeNotesFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.applicationOutcomeNotesFilters_.isEmpty()) {
          if (applicationOutcomeNotesFiltersBuilder_.isEmpty()) {
            applicationOutcomeNotesFiltersBuilder_.dispose();
            applicationOutcomeNotesFiltersBuilder_ = null;
            applicationOutcomeNotesFilters_ = other.applicationOutcomeNotesFilters_;
            bitField0_ = (bitField0_ & ~0x00000100);
            applicationOutcomeNotesFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getApplicationOutcomeNotesFiltersFieldBuilder() : null;
          } else {
            applicationOutcomeNotesFiltersBuilder_.addAllMessages(other.applicationOutcomeNotesFilters_);
          }
        }
      }
      if (applicationJobFiltersBuilder_ == null) {
        if (!other.applicationJobFilters_.isEmpty()) {
          if (applicationJobFilters_.isEmpty()) {
            applicationJobFilters_ = other.applicationJobFilters_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureApplicationJobFiltersIsMutable();
            applicationJobFilters_.addAll(other.applicationJobFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.applicationJobFilters_.isEmpty()) {
          if (applicationJobFiltersBuilder_.isEmpty()) {
            applicationJobFiltersBuilder_.dispose();
            applicationJobFiltersBuilder_ = null;
            applicationJobFilters_ = other.applicationJobFilters_;
            bitField0_ = (bitField0_ & ~0x00000200);
            applicationJobFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getApplicationJobFiltersFieldBuilder() : null;
          } else {
            applicationJobFiltersBuilder_.addAllMessages(other.applicationJobFilters_);
          }
        }
      }
      if (!other.getCustomAttributeFilter().isEmpty()) {
        customAttributeFilter_ = other.customAttributeFilter_;
        onChanged();
      }
      if (other.hasCandidateAvailabilityFilter()) {
        mergeCandidateAvailabilityFilter(other.getCandidateAvailabilityFilter());
      }
      if (availabilityFiltersBuilder_ == null) {
        if (!other.availabilityFilters_.isEmpty()) {
          if (availabilityFilters_.isEmpty()) {
            availabilityFilters_ = other.availabilityFilters_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureAvailabilityFiltersIsMutable();
            availabilityFilters_.addAll(other.availabilityFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.availabilityFilters_.isEmpty()) {
          if (availabilityFiltersBuilder_.isEmpty()) {
            availabilityFiltersBuilder_.dispose();
            availabilityFiltersBuilder_ = null;
            availabilityFilters_ = other.availabilityFilters_;
            bitField0_ = (bitField0_ & ~0x00000400);
            availabilityFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAvailabilityFiltersFieldBuilder() : null;
          } else {
            availabilityFiltersBuilder_.addAllMessages(other.availabilityFilters_);
          }
        }
      }
      if (personNameFiltersBuilder_ == null) {
        if (!other.personNameFilters_.isEmpty()) {
          if (personNameFilters_.isEmpty()) {
            personNameFilters_ = other.personNameFilters_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePersonNameFiltersIsMutable();
            personNameFilters_.addAll(other.personNameFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.personNameFilters_.isEmpty()) {
          if (personNameFiltersBuilder_.isEmpty()) {
            personNameFiltersBuilder_.dispose();
            personNameFiltersBuilder_ = null;
            personNameFilters_ = other.personNameFilters_;
            bitField0_ = (bitField0_ & ~0x00000800);
            personNameFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPersonNameFiltersFieldBuilder() : null;
          } else {
            personNameFiltersBuilder_.addAllMessages(other.personNameFilters_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.talent.v4beta1.ProfileQuery parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.talent.v4beta1.ProfileQuery) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object query_ = "";
    /**
     * <pre>
     * Keywords to match any text fields of profiles.
     * For example, "software engineer in Palo Alto".
     * </pre>
     *
     * <code>string query = 1;</code>
     * @return The query.
     */
    public java.lang.String getQuery() {
      java.lang.Object ref = query_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        query_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Keywords to match any text fields of profiles.
     * For example, "software engineer in Palo Alto".
     * </pre>
     *
     * <code>string query = 1;</code>
     * @return The bytes for query.
     */
    public com.google.protobuf.ByteString
        getQueryBytes() {
      java.lang.Object ref = query_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        query_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Keywords to match any text fields of profiles.
     * For example, "software engineer in Palo Alto".
     * </pre>
     *
     * <code>string query = 1;</code>
     * @param value The query to set.
     * @return This builder for chaining.
     */
    public Builder setQuery(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      query_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Keywords to match any text fields of profiles.
     * For example, "software engineer in Palo Alto".
     * </pre>
     *
     * <code>string query = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearQuery() {
      
      query_ = getDefaultInstance().getQuery();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Keywords to match any text fields of profiles.
     * For example, "software engineer in Palo Alto".
     * </pre>
     *
     * <code>string query = 1;</code>
     * @param value The bytes for query to set.
     * @return This builder for chaining.
     */
    public Builder setQueryBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      query_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.LocationFilter> locationFilters_ =
      java.util.Collections.emptyList();
    private void ensureLocationFiltersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        locationFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.LocationFilter>(locationFilters_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.LocationFilter, com.google.cloud.talent.v4beta1.LocationFilter.Builder, com.google.cloud.talent.v4beta1.LocationFilterOrBuilder> locationFiltersBuilder_;

    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.LocationFilter> getLocationFiltersList() {
      if (locationFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(locationFilters_);
      } else {
        return locationFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public int getLocationFiltersCount() {
      if (locationFiltersBuilder_ == null) {
        return locationFilters_.size();
      } else {
        return locationFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public com.google.cloud.talent.v4beta1.LocationFilter getLocationFilters(int index) {
      if (locationFiltersBuilder_ == null) {
        return locationFilters_.get(index);
      } else {
        return locationFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder setLocationFilters(
        int index, com.google.cloud.talent.v4beta1.LocationFilter value) {
      if (locationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationFiltersIsMutable();
        locationFilters_.set(index, value);
        onChanged();
      } else {
        locationFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder setLocationFilters(
        int index, com.google.cloud.talent.v4beta1.LocationFilter.Builder builderForValue) {
      if (locationFiltersBuilder_ == null) {
        ensureLocationFiltersIsMutable();
        locationFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        locationFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder addLocationFilters(com.google.cloud.talent.v4beta1.LocationFilter value) {
      if (locationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationFiltersIsMutable();
        locationFilters_.add(value);
        onChanged();
      } else {
        locationFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder addLocationFilters(
        int index, com.google.cloud.talent.v4beta1.LocationFilter value) {
      if (locationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationFiltersIsMutable();
        locationFilters_.add(index, value);
        onChanged();
      } else {
        locationFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder addLocationFilters(
        com.google.cloud.talent.v4beta1.LocationFilter.Builder builderForValue) {
      if (locationFiltersBuilder_ == null) {
        ensureLocationFiltersIsMutable();
        locationFilters_.add(builderForValue.build());
        onChanged();
      } else {
        locationFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder addLocationFilters(
        int index, com.google.cloud.talent.v4beta1.LocationFilter.Builder builderForValue) {
      if (locationFiltersBuilder_ == null) {
        ensureLocationFiltersIsMutable();
        locationFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        locationFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder addAllLocationFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.LocationFilter> values) {
      if (locationFiltersBuilder_ == null) {
        ensureLocationFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, locationFilters_);
        onChanged();
      } else {
        locationFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder clearLocationFilters() {
      if (locationFiltersBuilder_ == null) {
        locationFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        locationFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public Builder removeLocationFilters(int index) {
      if (locationFiltersBuilder_ == null) {
        ensureLocationFiltersIsMutable();
        locationFilters_.remove(index);
        onChanged();
      } else {
        locationFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public com.google.cloud.talent.v4beta1.LocationFilter.Builder getLocationFiltersBuilder(
        int index) {
      return getLocationFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public com.google.cloud.talent.v4beta1.LocationFilterOrBuilder getLocationFiltersOrBuilder(
        int index) {
      if (locationFiltersBuilder_ == null) {
        return locationFilters_.get(index);  } else {
        return locationFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.LocationFilterOrBuilder> 
         getLocationFiltersOrBuilderList() {
      if (locationFiltersBuilder_ != null) {
        return locationFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(locationFilters_);
      }
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public com.google.cloud.talent.v4beta1.LocationFilter.Builder addLocationFiltersBuilder() {
      return getLocationFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.LocationFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public com.google.cloud.talent.v4beta1.LocationFilter.Builder addLocationFiltersBuilder(
        int index) {
      return getLocationFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.LocationFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The location filter specifies geo-regions containing the profiles to
     * search against.
     * One of [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] or [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] must be
     * provided or an error is thrown. If both [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] and
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] are provided, an error is thrown.
     * The following logic is used to determine which locations in
     * the profile to filter against:
     * 1. All of the profile's geocoded [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where
     * [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 2. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is true.
     * 3. If the above set of locations is empty, all of the profile's geocoded
     * [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is PERSONAL or
     * CONTACT_INFO_USAGE_UNSPECIFIED and [Address.current][google.cloud.talent.v4beta1.Address.current] is not set.
     * This means that any profiles without any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] that match
     * any of the above criteria will not be included in a search with location
     * filter. Furthermore, any [Profile.addresses][google.cloud.talent.v4beta1.Profile.addresses] where [Address.usage][google.cloud.talent.v4beta1.Address.usage] is
     * WORK or SCHOOL or where [Address.current][google.cloud.talent.v4beta1.Address.current] is false are not considered for
     * location filter.
     * If a location filter isn't specified, profiles fitting the other search
     * criteria are retrieved regardless of where they're located.
     * If [LocationFilter.negated][google.cloud.talent.v4beta1.LocationFilter.negated] is specified, the result doesn't contain
     * profiles from that location.
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided, the
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType], center
     * point (latitude and longitude), and radius are automatically detected by
     * the Google Maps Geocoding API and included as well. If
     * [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] cannot be geocoded, the filter
     * falls back to keyword search.
     * If the detected
     * [LocationType][google.cloud.talent.v4beta1.Location.LocationType] is
     * [LocationType.SUB_ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.SUB_ADMINISTRATIVE_AREA],
     * [LocationType.ADMINISTRATIVE_AREA][google.cloud.talent.v4beta1.Location.LocationType.ADMINISTRATIVE_AREA],
     * or
     * [LocationType.COUNTRY][google.cloud.talent.v4beta1.Location.LocationType.COUNTRY],
     * the filter is performed against the detected location name (using exact
     * text matching). Otherwise, the filter is performed against the detected
     * center point and a radius of detected location radius +
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles].
     * If [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the additional radius on top of the
     * radius of the location geocoded from [LocationFilter.address][google.cloud.talent.v4beta1.LocationFilter.address]. If
     * [LocationFilter.lat_lng][google.cloud.talent.v4beta1.LocationFilter.lat_lng] is provided,
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is the only radius that is used.
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 10 by default. Note that the value
     * of [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is 0 if it is unset, so the server
     * does not differentiate [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is
     * explicitly set to 0 and [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] that is not
     * set. Which means that if [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is explicitly
     * set to 0, the server will use the default value of
     * [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] which is 10. To work around this and
     * effectively set [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to 0, we recommend
     * setting [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] to a very small decimal number
     * (such as 0.00001).
     * If [LocationFilter.distance_in_miles][google.cloud.talent.v4beta1.LocationFilter.distance_in_miles] is negative, an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.LocationFilter location_filters = 2;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.LocationFilter.Builder> 
         getLocationFiltersBuilderList() {
      return getLocationFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.LocationFilter, com.google.cloud.talent.v4beta1.LocationFilter.Builder, com.google.cloud.talent.v4beta1.LocationFilterOrBuilder> 
        getLocationFiltersFieldBuilder() {
      if (locationFiltersBuilder_ == null) {
        locationFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.LocationFilter, com.google.cloud.talent.v4beta1.LocationFilter.Builder, com.google.cloud.talent.v4beta1.LocationFilterOrBuilder>(
                locationFilters_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        locationFilters_ = null;
      }
      return locationFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.JobTitleFilter> jobTitleFilters_ =
      java.util.Collections.emptyList();
    private void ensureJobTitleFiltersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        jobTitleFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.JobTitleFilter>(jobTitleFilters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.JobTitleFilter, com.google.cloud.talent.v4beta1.JobTitleFilter.Builder, com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder> jobTitleFiltersBuilder_;

    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.JobTitleFilter> getJobTitleFiltersList() {
      if (jobTitleFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(jobTitleFilters_);
      } else {
        return jobTitleFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public int getJobTitleFiltersCount() {
      if (jobTitleFiltersBuilder_ == null) {
        return jobTitleFilters_.size();
      } else {
        return jobTitleFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.JobTitleFilter getJobTitleFilters(int index) {
      if (jobTitleFiltersBuilder_ == null) {
        return jobTitleFilters_.get(index);
      } else {
        return jobTitleFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder setJobTitleFilters(
        int index, com.google.cloud.talent.v4beta1.JobTitleFilter value) {
      if (jobTitleFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.set(index, value);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder setJobTitleFilters(
        int index, com.google.cloud.talent.v4beta1.JobTitleFilter.Builder builderForValue) {
      if (jobTitleFiltersBuilder_ == null) {
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        jobTitleFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder addJobTitleFilters(com.google.cloud.talent.v4beta1.JobTitleFilter value) {
      if (jobTitleFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.add(value);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder addJobTitleFilters(
        int index, com.google.cloud.talent.v4beta1.JobTitleFilter value) {
      if (jobTitleFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.add(index, value);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder addJobTitleFilters(
        com.google.cloud.talent.v4beta1.JobTitleFilter.Builder builderForValue) {
      if (jobTitleFiltersBuilder_ == null) {
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.add(builderForValue.build());
        onChanged();
      } else {
        jobTitleFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder addJobTitleFilters(
        int index, com.google.cloud.talent.v4beta1.JobTitleFilter.Builder builderForValue) {
      if (jobTitleFiltersBuilder_ == null) {
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        jobTitleFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder addAllJobTitleFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.JobTitleFilter> values) {
      if (jobTitleFiltersBuilder_ == null) {
        ensureJobTitleFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, jobTitleFilters_);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder clearJobTitleFilters() {
      if (jobTitleFiltersBuilder_ == null) {
        jobTitleFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public Builder removeJobTitleFilters(int index) {
      if (jobTitleFiltersBuilder_ == null) {
        ensureJobTitleFiltersIsMutable();
        jobTitleFilters_.remove(index);
        onChanged();
      } else {
        jobTitleFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.JobTitleFilter.Builder getJobTitleFiltersBuilder(
        int index) {
      return getJobTitleFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder getJobTitleFiltersOrBuilder(
        int index) {
      if (jobTitleFiltersBuilder_ == null) {
        return jobTitleFilters_.get(index);  } else {
        return jobTitleFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder> 
         getJobTitleFiltersOrBuilderList() {
      if (jobTitleFiltersBuilder_ != null) {
        return jobTitleFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(jobTitleFilters_);
      }
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.JobTitleFilter.Builder addJobTitleFiltersBuilder() {
      return getJobTitleFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.JobTitleFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.JobTitleFilter.Builder addJobTitleFiltersBuilder(
        int index) {
      return getJobTitleFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.JobTitleFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Job title filter specifies job titles of profiles to match on.
     * If a job title isn't specified, profiles with any titles are retrieved.
     * If multiple values are specified, profiles are retrieved with any of the
     * specified job titles.
     * If [JobTitleFilter.negated][google.cloud.talent.v4beta1.JobTitleFilter.negated] is specified, the result won't contain
     * profiles with the job titles.
     * For example, search for profiles with a job title "Product Manager".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.JobTitleFilter job_title_filters = 3;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.JobTitleFilter.Builder> 
         getJobTitleFiltersBuilderList() {
      return getJobTitleFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.JobTitleFilter, com.google.cloud.talent.v4beta1.JobTitleFilter.Builder, com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder> 
        getJobTitleFiltersFieldBuilder() {
      if (jobTitleFiltersBuilder_ == null) {
        jobTitleFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.JobTitleFilter, com.google.cloud.talent.v4beta1.JobTitleFilter.Builder, com.google.cloud.talent.v4beta1.JobTitleFilterOrBuilder>(
                jobTitleFilters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        jobTitleFilters_ = null;
      }
      return jobTitleFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.EmployerFilter> employerFilters_ =
      java.util.Collections.emptyList();
    private void ensureEmployerFiltersIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        employerFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.EmployerFilter>(employerFilters_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.EmployerFilter, com.google.cloud.talent.v4beta1.EmployerFilter.Builder, com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder> employerFiltersBuilder_;

    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.EmployerFilter> getEmployerFiltersList() {
      if (employerFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(employerFilters_);
      } else {
        return employerFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public int getEmployerFiltersCount() {
      if (employerFiltersBuilder_ == null) {
        return employerFilters_.size();
      } else {
        return employerFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public com.google.cloud.talent.v4beta1.EmployerFilter getEmployerFilters(int index) {
      if (employerFiltersBuilder_ == null) {
        return employerFilters_.get(index);
      } else {
        return employerFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder setEmployerFilters(
        int index, com.google.cloud.talent.v4beta1.EmployerFilter value) {
      if (employerFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEmployerFiltersIsMutable();
        employerFilters_.set(index, value);
        onChanged();
      } else {
        employerFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder setEmployerFilters(
        int index, com.google.cloud.talent.v4beta1.EmployerFilter.Builder builderForValue) {
      if (employerFiltersBuilder_ == null) {
        ensureEmployerFiltersIsMutable();
        employerFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        employerFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder addEmployerFilters(com.google.cloud.talent.v4beta1.EmployerFilter value) {
      if (employerFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEmployerFiltersIsMutable();
        employerFilters_.add(value);
        onChanged();
      } else {
        employerFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder addEmployerFilters(
        int index, com.google.cloud.talent.v4beta1.EmployerFilter value) {
      if (employerFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEmployerFiltersIsMutable();
        employerFilters_.add(index, value);
        onChanged();
      } else {
        employerFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder addEmployerFilters(
        com.google.cloud.talent.v4beta1.EmployerFilter.Builder builderForValue) {
      if (employerFiltersBuilder_ == null) {
        ensureEmployerFiltersIsMutable();
        employerFilters_.add(builderForValue.build());
        onChanged();
      } else {
        employerFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder addEmployerFilters(
        int index, com.google.cloud.talent.v4beta1.EmployerFilter.Builder builderForValue) {
      if (employerFiltersBuilder_ == null) {
        ensureEmployerFiltersIsMutable();
        employerFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        employerFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder addAllEmployerFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.EmployerFilter> values) {
      if (employerFiltersBuilder_ == null) {
        ensureEmployerFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, employerFilters_);
        onChanged();
      } else {
        employerFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder clearEmployerFilters() {
      if (employerFiltersBuilder_ == null) {
        employerFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        employerFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public Builder removeEmployerFilters(int index) {
      if (employerFiltersBuilder_ == null) {
        ensureEmployerFiltersIsMutable();
        employerFilters_.remove(index);
        onChanged();
      } else {
        employerFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public com.google.cloud.talent.v4beta1.EmployerFilter.Builder getEmployerFiltersBuilder(
        int index) {
      return getEmployerFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder getEmployerFiltersOrBuilder(
        int index) {
      if (employerFiltersBuilder_ == null) {
        return employerFilters_.get(index);  } else {
        return employerFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder> 
         getEmployerFiltersOrBuilderList() {
      if (employerFiltersBuilder_ != null) {
        return employerFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(employerFilters_);
      }
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public com.google.cloud.talent.v4beta1.EmployerFilter.Builder addEmployerFiltersBuilder() {
      return getEmployerFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.EmployerFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public com.google.cloud.talent.v4beta1.EmployerFilter.Builder addEmployerFiltersBuilder(
        int index) {
      return getEmployerFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.EmployerFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Employer filter specifies employers of profiles to match on.
     * If an employer filter isn't specified, profiles with any employers are
     * retrieved.
     * If multiple employer filters are specified, profiles with any matching
     * employers are retrieved.
     * If [EmployerFilter.negated][google.cloud.talent.v4beta1.EmployerFilter.negated] is specified, the result won't contain
     * profiles that match the employers.
     * For example, search for profiles that have working experience at "Google
     * LLC".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EmployerFilter employer_filters = 4;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.EmployerFilter.Builder> 
         getEmployerFiltersBuilderList() {
      return getEmployerFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.EmployerFilter, com.google.cloud.talent.v4beta1.EmployerFilter.Builder, com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder> 
        getEmployerFiltersFieldBuilder() {
      if (employerFiltersBuilder_ == null) {
        employerFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.EmployerFilter, com.google.cloud.talent.v4beta1.EmployerFilter.Builder, com.google.cloud.talent.v4beta1.EmployerFilterOrBuilder>(
                employerFilters_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        employerFilters_ = null;
      }
      return employerFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.EducationFilter> educationFilters_ =
      java.util.Collections.emptyList();
    private void ensureEducationFiltersIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        educationFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.EducationFilter>(educationFilters_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.EducationFilter, com.google.cloud.talent.v4beta1.EducationFilter.Builder, com.google.cloud.talent.v4beta1.EducationFilterOrBuilder> educationFiltersBuilder_;

    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.EducationFilter> getEducationFiltersList() {
      if (educationFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(educationFilters_);
      } else {
        return educationFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public int getEducationFiltersCount() {
      if (educationFiltersBuilder_ == null) {
        return educationFilters_.size();
      } else {
        return educationFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public com.google.cloud.talent.v4beta1.EducationFilter getEducationFilters(int index) {
      if (educationFiltersBuilder_ == null) {
        return educationFilters_.get(index);
      } else {
        return educationFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder setEducationFilters(
        int index, com.google.cloud.talent.v4beta1.EducationFilter value) {
      if (educationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEducationFiltersIsMutable();
        educationFilters_.set(index, value);
        onChanged();
      } else {
        educationFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder setEducationFilters(
        int index, com.google.cloud.talent.v4beta1.EducationFilter.Builder builderForValue) {
      if (educationFiltersBuilder_ == null) {
        ensureEducationFiltersIsMutable();
        educationFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        educationFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder addEducationFilters(com.google.cloud.talent.v4beta1.EducationFilter value) {
      if (educationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEducationFiltersIsMutable();
        educationFilters_.add(value);
        onChanged();
      } else {
        educationFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder addEducationFilters(
        int index, com.google.cloud.talent.v4beta1.EducationFilter value) {
      if (educationFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEducationFiltersIsMutable();
        educationFilters_.add(index, value);
        onChanged();
      } else {
        educationFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder addEducationFilters(
        com.google.cloud.talent.v4beta1.EducationFilter.Builder builderForValue) {
      if (educationFiltersBuilder_ == null) {
        ensureEducationFiltersIsMutable();
        educationFilters_.add(builderForValue.build());
        onChanged();
      } else {
        educationFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder addEducationFilters(
        int index, com.google.cloud.talent.v4beta1.EducationFilter.Builder builderForValue) {
      if (educationFiltersBuilder_ == null) {
        ensureEducationFiltersIsMutable();
        educationFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        educationFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder addAllEducationFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.EducationFilter> values) {
      if (educationFiltersBuilder_ == null) {
        ensureEducationFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, educationFilters_);
        onChanged();
      } else {
        educationFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder clearEducationFilters() {
      if (educationFiltersBuilder_ == null) {
        educationFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        educationFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public Builder removeEducationFilters(int index) {
      if (educationFiltersBuilder_ == null) {
        ensureEducationFiltersIsMutable();
        educationFilters_.remove(index);
        onChanged();
      } else {
        educationFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public com.google.cloud.talent.v4beta1.EducationFilter.Builder getEducationFiltersBuilder(
        int index) {
      return getEducationFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public com.google.cloud.talent.v4beta1.EducationFilterOrBuilder getEducationFiltersOrBuilder(
        int index) {
      if (educationFiltersBuilder_ == null) {
        return educationFilters_.get(index);  } else {
        return educationFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.EducationFilterOrBuilder> 
         getEducationFiltersOrBuilderList() {
      if (educationFiltersBuilder_ != null) {
        return educationFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(educationFilters_);
      }
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public com.google.cloud.talent.v4beta1.EducationFilter.Builder addEducationFiltersBuilder() {
      return getEducationFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.EducationFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public com.google.cloud.talent.v4beta1.EducationFilter.Builder addEducationFiltersBuilder(
        int index) {
      return getEducationFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.EducationFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Education filter specifies education of profiles to match on.
     * If an education filter isn't specified, profiles with any education are
     * retrieved.
     * If multiple education filters are specified, profiles that match any
     * education filters are retrieved.
     * If [EducationFilter.negated][google.cloud.talent.v4beta1.EducationFilter.negated] is specified, the result won't contain
     * profiles that match the educations.
     * For example, search for profiles with a master degree.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.EducationFilter education_filters = 5;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.EducationFilter.Builder> 
         getEducationFiltersBuilderList() {
      return getEducationFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.EducationFilter, com.google.cloud.talent.v4beta1.EducationFilter.Builder, com.google.cloud.talent.v4beta1.EducationFilterOrBuilder> 
        getEducationFiltersFieldBuilder() {
      if (educationFiltersBuilder_ == null) {
        educationFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.EducationFilter, com.google.cloud.talent.v4beta1.EducationFilter.Builder, com.google.cloud.talent.v4beta1.EducationFilterOrBuilder>(
                educationFilters_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        educationFilters_ = null;
      }
      return educationFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.SkillFilter> skillFilters_ =
      java.util.Collections.emptyList();
    private void ensureSkillFiltersIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        skillFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.SkillFilter>(skillFilters_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.SkillFilter, com.google.cloud.talent.v4beta1.SkillFilter.Builder, com.google.cloud.talent.v4beta1.SkillFilterOrBuilder> skillFiltersBuilder_;

    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.SkillFilter> getSkillFiltersList() {
      if (skillFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(skillFilters_);
      } else {
        return skillFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public int getSkillFiltersCount() {
      if (skillFiltersBuilder_ == null) {
        return skillFilters_.size();
      } else {
        return skillFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public com.google.cloud.talent.v4beta1.SkillFilter getSkillFilters(int index) {
      if (skillFiltersBuilder_ == null) {
        return skillFilters_.get(index);
      } else {
        return skillFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder setSkillFilters(
        int index, com.google.cloud.talent.v4beta1.SkillFilter value) {
      if (skillFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSkillFiltersIsMutable();
        skillFilters_.set(index, value);
        onChanged();
      } else {
        skillFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder setSkillFilters(
        int index, com.google.cloud.talent.v4beta1.SkillFilter.Builder builderForValue) {
      if (skillFiltersBuilder_ == null) {
        ensureSkillFiltersIsMutable();
        skillFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        skillFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder addSkillFilters(com.google.cloud.talent.v4beta1.SkillFilter value) {
      if (skillFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSkillFiltersIsMutable();
        skillFilters_.add(value);
        onChanged();
      } else {
        skillFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder addSkillFilters(
        int index, com.google.cloud.talent.v4beta1.SkillFilter value) {
      if (skillFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSkillFiltersIsMutable();
        skillFilters_.add(index, value);
        onChanged();
      } else {
        skillFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder addSkillFilters(
        com.google.cloud.talent.v4beta1.SkillFilter.Builder builderForValue) {
      if (skillFiltersBuilder_ == null) {
        ensureSkillFiltersIsMutable();
        skillFilters_.add(builderForValue.build());
        onChanged();
      } else {
        skillFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder addSkillFilters(
        int index, com.google.cloud.talent.v4beta1.SkillFilter.Builder builderForValue) {
      if (skillFiltersBuilder_ == null) {
        ensureSkillFiltersIsMutable();
        skillFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        skillFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder addAllSkillFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.SkillFilter> values) {
      if (skillFiltersBuilder_ == null) {
        ensureSkillFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, skillFilters_);
        onChanged();
      } else {
        skillFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder clearSkillFilters() {
      if (skillFiltersBuilder_ == null) {
        skillFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        skillFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public Builder removeSkillFilters(int index) {
      if (skillFiltersBuilder_ == null) {
        ensureSkillFiltersIsMutable();
        skillFilters_.remove(index);
        onChanged();
      } else {
        skillFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public com.google.cloud.talent.v4beta1.SkillFilter.Builder getSkillFiltersBuilder(
        int index) {
      return getSkillFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public com.google.cloud.talent.v4beta1.SkillFilterOrBuilder getSkillFiltersOrBuilder(
        int index) {
      if (skillFiltersBuilder_ == null) {
        return skillFilters_.get(index);  } else {
        return skillFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.SkillFilterOrBuilder> 
         getSkillFiltersOrBuilderList() {
      if (skillFiltersBuilder_ != null) {
        return skillFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(skillFilters_);
      }
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public com.google.cloud.talent.v4beta1.SkillFilter.Builder addSkillFiltersBuilder() {
      return getSkillFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.SkillFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public com.google.cloud.talent.v4beta1.SkillFilter.Builder addSkillFiltersBuilder(
        int index) {
      return getSkillFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.SkillFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Skill filter specifies skill of profiles to match on.
     * If a skill filter isn't specified, profiles with any skills are retrieved.
     * If multiple skill filters are specified, profiles that match any skill
     * filters are retrieved.
     * If [SkillFilter.negated][google.cloud.talent.v4beta1.SkillFilter.negated] is specified, the result won't contain profiles
     * that match the skills.
     * For example, search for profiles that have "Java" and "Python" in skill
     * list.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.SkillFilter skill_filters = 6;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.SkillFilter.Builder> 
         getSkillFiltersBuilderList() {
      return getSkillFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.SkillFilter, com.google.cloud.talent.v4beta1.SkillFilter.Builder, com.google.cloud.talent.v4beta1.SkillFilterOrBuilder> 
        getSkillFiltersFieldBuilder() {
      if (skillFiltersBuilder_ == null) {
        skillFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.SkillFilter, com.google.cloud.talent.v4beta1.SkillFilter.Builder, com.google.cloud.talent.v4beta1.SkillFilterOrBuilder>(
                skillFilters_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        skillFilters_ = null;
      }
      return skillFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.WorkExperienceFilter> workExperienceFilter_ =
      java.util.Collections.emptyList();
    private void ensureWorkExperienceFilterIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        workExperienceFilter_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.WorkExperienceFilter>(workExperienceFilter_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.WorkExperienceFilter, com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder, com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder> workExperienceFilterBuilder_;

    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.WorkExperienceFilter> getWorkExperienceFilterList() {
      if (workExperienceFilterBuilder_ == null) {
        return java.util.Collections.unmodifiableList(workExperienceFilter_);
      } else {
        return workExperienceFilterBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public int getWorkExperienceFilterCount() {
      if (workExperienceFilterBuilder_ == null) {
        return workExperienceFilter_.size();
      } else {
        return workExperienceFilterBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public com.google.cloud.talent.v4beta1.WorkExperienceFilter getWorkExperienceFilter(int index) {
      if (workExperienceFilterBuilder_ == null) {
        return workExperienceFilter_.get(index);
      } else {
        return workExperienceFilterBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder setWorkExperienceFilter(
        int index, com.google.cloud.talent.v4beta1.WorkExperienceFilter value) {
      if (workExperienceFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.set(index, value);
        onChanged();
      } else {
        workExperienceFilterBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder setWorkExperienceFilter(
        int index, com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder builderForValue) {
      if (workExperienceFilterBuilder_ == null) {
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.set(index, builderForValue.build());
        onChanged();
      } else {
        workExperienceFilterBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder addWorkExperienceFilter(com.google.cloud.talent.v4beta1.WorkExperienceFilter value) {
      if (workExperienceFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.add(value);
        onChanged();
      } else {
        workExperienceFilterBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder addWorkExperienceFilter(
        int index, com.google.cloud.talent.v4beta1.WorkExperienceFilter value) {
      if (workExperienceFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.add(index, value);
        onChanged();
      } else {
        workExperienceFilterBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder addWorkExperienceFilter(
        com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder builderForValue) {
      if (workExperienceFilterBuilder_ == null) {
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.add(builderForValue.build());
        onChanged();
      } else {
        workExperienceFilterBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder addWorkExperienceFilter(
        int index, com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder builderForValue) {
      if (workExperienceFilterBuilder_ == null) {
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.add(index, builderForValue.build());
        onChanged();
      } else {
        workExperienceFilterBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder addAllWorkExperienceFilter(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.WorkExperienceFilter> values) {
      if (workExperienceFilterBuilder_ == null) {
        ensureWorkExperienceFilterIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, workExperienceFilter_);
        onChanged();
      } else {
        workExperienceFilterBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder clearWorkExperienceFilter() {
      if (workExperienceFilterBuilder_ == null) {
        workExperienceFilter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        workExperienceFilterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public Builder removeWorkExperienceFilter(int index) {
      if (workExperienceFilterBuilder_ == null) {
        ensureWorkExperienceFilterIsMutable();
        workExperienceFilter_.remove(index);
        onChanged();
      } else {
        workExperienceFilterBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder getWorkExperienceFilterBuilder(
        int index) {
      return getWorkExperienceFilterFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder getWorkExperienceFilterOrBuilder(
        int index) {
      if (workExperienceFilterBuilder_ == null) {
        return workExperienceFilter_.get(index);  } else {
        return workExperienceFilterBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder> 
         getWorkExperienceFilterOrBuilderList() {
      if (workExperienceFilterBuilder_ != null) {
        return workExperienceFilterBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(workExperienceFilter_);
      }
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder addWorkExperienceFilterBuilder() {
      return getWorkExperienceFilterFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.WorkExperienceFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder addWorkExperienceFilterBuilder(
        int index) {
      return getWorkExperienceFilterFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.WorkExperienceFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Work experience filter specifies the total working experience of profiles
     * to match on.
     * If a work experience filter isn't specified, profiles with any
     * professional experience are retrieved.
     * If multiple work experience filters are specified, profiles that match any
     * work experience filters are retrieved.
     * For example, search for profiles with 10 years of work experience.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.WorkExperienceFilter work_experience_filter = 7;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder> 
         getWorkExperienceFilterBuilderList() {
      return getWorkExperienceFilterFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.WorkExperienceFilter, com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder, com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder> 
        getWorkExperienceFilterFieldBuilder() {
      if (workExperienceFilterBuilder_ == null) {
        workExperienceFilterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.WorkExperienceFilter, com.google.cloud.talent.v4beta1.WorkExperienceFilter.Builder, com.google.cloud.talent.v4beta1.WorkExperienceFilterOrBuilder>(
                workExperienceFilter_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        workExperienceFilter_ = null;
      }
      return workExperienceFilterBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.TimeFilter> timeFilters_ =
      java.util.Collections.emptyList();
    private void ensureTimeFiltersIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        timeFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.TimeFilter>(timeFilters_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.TimeFilter, com.google.cloud.talent.v4beta1.TimeFilter.Builder, com.google.cloud.talent.v4beta1.TimeFilterOrBuilder> timeFiltersBuilder_;

    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.TimeFilter> getTimeFiltersList() {
      if (timeFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(timeFilters_);
      } else {
        return timeFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public int getTimeFiltersCount() {
      if (timeFiltersBuilder_ == null) {
        return timeFilters_.size();
      } else {
        return timeFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public com.google.cloud.talent.v4beta1.TimeFilter getTimeFilters(int index) {
      if (timeFiltersBuilder_ == null) {
        return timeFilters_.get(index);
      } else {
        return timeFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder setTimeFilters(
        int index, com.google.cloud.talent.v4beta1.TimeFilter value) {
      if (timeFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTimeFiltersIsMutable();
        timeFilters_.set(index, value);
        onChanged();
      } else {
        timeFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder setTimeFilters(
        int index, com.google.cloud.talent.v4beta1.TimeFilter.Builder builderForValue) {
      if (timeFiltersBuilder_ == null) {
        ensureTimeFiltersIsMutable();
        timeFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        timeFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder addTimeFilters(com.google.cloud.talent.v4beta1.TimeFilter value) {
      if (timeFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTimeFiltersIsMutable();
        timeFilters_.add(value);
        onChanged();
      } else {
        timeFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder addTimeFilters(
        int index, com.google.cloud.talent.v4beta1.TimeFilter value) {
      if (timeFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTimeFiltersIsMutable();
        timeFilters_.add(index, value);
        onChanged();
      } else {
        timeFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder addTimeFilters(
        com.google.cloud.talent.v4beta1.TimeFilter.Builder builderForValue) {
      if (timeFiltersBuilder_ == null) {
        ensureTimeFiltersIsMutable();
        timeFilters_.add(builderForValue.build());
        onChanged();
      } else {
        timeFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder addTimeFilters(
        int index, com.google.cloud.talent.v4beta1.TimeFilter.Builder builderForValue) {
      if (timeFiltersBuilder_ == null) {
        ensureTimeFiltersIsMutable();
        timeFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        timeFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder addAllTimeFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.TimeFilter> values) {
      if (timeFiltersBuilder_ == null) {
        ensureTimeFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timeFilters_);
        onChanged();
      } else {
        timeFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder clearTimeFilters() {
      if (timeFiltersBuilder_ == null) {
        timeFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        timeFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public Builder removeTimeFilters(int index) {
      if (timeFiltersBuilder_ == null) {
        ensureTimeFiltersIsMutable();
        timeFilters_.remove(index);
        onChanged();
      } else {
        timeFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public com.google.cloud.talent.v4beta1.TimeFilter.Builder getTimeFiltersBuilder(
        int index) {
      return getTimeFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public com.google.cloud.talent.v4beta1.TimeFilterOrBuilder getTimeFiltersOrBuilder(
        int index) {
      if (timeFiltersBuilder_ == null) {
        return timeFilters_.get(index);  } else {
        return timeFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.TimeFilterOrBuilder> 
         getTimeFiltersOrBuilderList() {
      if (timeFiltersBuilder_ != null) {
        return timeFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(timeFilters_);
      }
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public com.google.cloud.talent.v4beta1.TimeFilter.Builder addTimeFiltersBuilder() {
      return getTimeFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.TimeFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public com.google.cloud.talent.v4beta1.TimeFilter.Builder addTimeFiltersBuilder(
        int index) {
      return getTimeFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.TimeFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Time filter specifies the create/update timestamp of the profiles to match
     * on.
     * For example, search for profiles created since "2018-1-1".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.TimeFilter time_filters = 8;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.TimeFilter.Builder> 
         getTimeFiltersBuilderList() {
      return getTimeFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.TimeFilter, com.google.cloud.talent.v4beta1.TimeFilter.Builder, com.google.cloud.talent.v4beta1.TimeFilterOrBuilder> 
        getTimeFiltersFieldBuilder() {
      if (timeFiltersBuilder_ == null) {
        timeFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.TimeFilter, com.google.cloud.talent.v4beta1.TimeFilter.Builder, com.google.cloud.talent.v4beta1.TimeFilterOrBuilder>(
                timeFilters_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        timeFilters_ = null;
      }
      return timeFiltersBuilder_;
    }

    private com.google.protobuf.BoolValue hirableFilter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> hirableFilterBuilder_;
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     * @return Whether the hirableFilter field is set.
     */
    public boolean hasHirableFilter() {
      return hirableFilterBuilder_ != null || hirableFilter_ != null;
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     * @return The hirableFilter.
     */
    public com.google.protobuf.BoolValue getHirableFilter() {
      if (hirableFilterBuilder_ == null) {
        return hirableFilter_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : hirableFilter_;
      } else {
        return hirableFilterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public Builder setHirableFilter(com.google.protobuf.BoolValue value) {
      if (hirableFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hirableFilter_ = value;
        onChanged();
      } else {
        hirableFilterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public Builder setHirableFilter(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (hirableFilterBuilder_ == null) {
        hirableFilter_ = builderForValue.build();
        onChanged();
      } else {
        hirableFilterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public Builder mergeHirableFilter(com.google.protobuf.BoolValue value) {
      if (hirableFilterBuilder_ == null) {
        if (hirableFilter_ != null) {
          hirableFilter_ =
            com.google.protobuf.BoolValue.newBuilder(hirableFilter_).mergeFrom(value).buildPartial();
        } else {
          hirableFilter_ = value;
        }
        onChanged();
      } else {
        hirableFilterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public Builder clearHirableFilter() {
      if (hirableFilterBuilder_ == null) {
        hirableFilter_ = null;
        onChanged();
      } else {
        hirableFilter_ = null;
        hirableFilterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public com.google.protobuf.BoolValue.Builder getHirableFilterBuilder() {
      
      onChanged();
      return getHirableFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getHirableFilterOrBuilder() {
      if (hirableFilterBuilder_ != null) {
        return hirableFilterBuilder_.getMessageOrBuilder();
      } else {
        return hirableFilter_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : hirableFilter_;
      }
    }
    /**
     * <pre>
     * The hirable filter specifies the profile's hirable status to match on.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue hirable_filter = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getHirableFilterFieldBuilder() {
      if (hirableFilterBuilder_ == null) {
        hirableFilterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getHirableFilter(),
                getParentForChildren(),
                isClean());
        hirableFilter_ = null;
      }
      return hirableFilterBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.ApplicationDateFilter> applicationDateFilters_ =
      java.util.Collections.emptyList();
    private void ensureApplicationDateFiltersIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        applicationDateFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationDateFilter>(applicationDateFilters_);
        bitField0_ |= 0x00000080;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationDateFilter, com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder> applicationDateFiltersBuilder_;

    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationDateFilter> getApplicationDateFiltersList() {
      if (applicationDateFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(applicationDateFilters_);
      } else {
        return applicationDateFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public int getApplicationDateFiltersCount() {
      if (applicationDateFiltersBuilder_ == null) {
        return applicationDateFilters_.size();
      } else {
        return applicationDateFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationDateFilter getApplicationDateFilters(int index) {
      if (applicationDateFiltersBuilder_ == null) {
        return applicationDateFilters_.get(index);
      } else {
        return applicationDateFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder setApplicationDateFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationDateFilter value) {
      if (applicationDateFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.set(index, value);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder setApplicationDateFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder builderForValue) {
      if (applicationDateFiltersBuilder_ == null) {
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        applicationDateFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder addApplicationDateFilters(com.google.cloud.talent.v4beta1.ApplicationDateFilter value) {
      if (applicationDateFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.add(value);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder addApplicationDateFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationDateFilter value) {
      if (applicationDateFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.add(index, value);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder addApplicationDateFilters(
        com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder builderForValue) {
      if (applicationDateFiltersBuilder_ == null) {
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.add(builderForValue.build());
        onChanged();
      } else {
        applicationDateFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder addApplicationDateFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder builderForValue) {
      if (applicationDateFiltersBuilder_ == null) {
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        applicationDateFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder addAllApplicationDateFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.ApplicationDateFilter> values) {
      if (applicationDateFiltersBuilder_ == null) {
        ensureApplicationDateFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, applicationDateFilters_);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder clearApplicationDateFilters() {
      if (applicationDateFiltersBuilder_ == null) {
        applicationDateFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public Builder removeApplicationDateFilters(int index) {
      if (applicationDateFiltersBuilder_ == null) {
        ensureApplicationDateFiltersIsMutable();
        applicationDateFilters_.remove(index);
        onChanged();
      } else {
        applicationDateFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder getApplicationDateFiltersBuilder(
        int index) {
      return getApplicationDateFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder getApplicationDateFiltersOrBuilder(
        int index) {
      if (applicationDateFiltersBuilder_ == null) {
        return applicationDateFilters_.get(index);  } else {
        return applicationDateFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder> 
         getApplicationDateFiltersOrBuilderList() {
      if (applicationDateFiltersBuilder_ != null) {
        return applicationDateFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(applicationDateFilters_);
      }
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder addApplicationDateFiltersBuilder() {
      return getApplicationDateFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.ApplicationDateFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder addApplicationDateFiltersBuilder(
        int index) {
      return getApplicationDateFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.ApplicationDateFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application date filters specify application date ranges to match on.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationDateFilter application_date_filters = 10;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder> 
         getApplicationDateFiltersBuilderList() {
      return getApplicationDateFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationDateFilter, com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder> 
        getApplicationDateFiltersFieldBuilder() {
      if (applicationDateFiltersBuilder_ == null) {
        applicationDateFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.ApplicationDateFilter, com.google.cloud.talent.v4beta1.ApplicationDateFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationDateFilterOrBuilder>(
                applicationDateFilters_,
                ((bitField0_ & 0x00000080) != 0),
                getParentForChildren(),
                isClean());
        applicationDateFilters_ = null;
      }
      return applicationDateFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter> applicationOutcomeNotesFilters_ =
      java.util.Collections.emptyList();
    private void ensureApplicationOutcomeNotesFiltersIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        applicationOutcomeNotesFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter>(applicationOutcomeNotesFilters_);
        bitField0_ |= 0x00000100;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder> applicationOutcomeNotesFiltersBuilder_;

    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter> getApplicationOutcomeNotesFiltersList() {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(applicationOutcomeNotesFilters_);
      } else {
        return applicationOutcomeNotesFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public int getApplicationOutcomeNotesFiltersCount() {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        return applicationOutcomeNotesFilters_.size();
      } else {
        return applicationOutcomeNotesFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter getApplicationOutcomeNotesFilters(int index) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        return applicationOutcomeNotesFilters_.get(index);
      } else {
        return applicationOutcomeNotesFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder setApplicationOutcomeNotesFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter value) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.set(index, value);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder setApplicationOutcomeNotesFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder builderForValue) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder addApplicationOutcomeNotesFilters(com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter value) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.add(value);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder addApplicationOutcomeNotesFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter value) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.add(index, value);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder addApplicationOutcomeNotesFilters(
        com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder builderForValue) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.add(builderForValue.build());
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder addApplicationOutcomeNotesFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder builderForValue) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder addAllApplicationOutcomeNotesFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter> values) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        ensureApplicationOutcomeNotesFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, applicationOutcomeNotesFilters_);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder clearApplicationOutcomeNotesFilters() {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        applicationOutcomeNotesFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public Builder removeApplicationOutcomeNotesFilters(int index) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        ensureApplicationOutcomeNotesFiltersIsMutable();
        applicationOutcomeNotesFilters_.remove(index);
        onChanged();
      } else {
        applicationOutcomeNotesFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder getApplicationOutcomeNotesFiltersBuilder(
        int index) {
      return getApplicationOutcomeNotesFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder getApplicationOutcomeNotesFiltersOrBuilder(
        int index) {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        return applicationOutcomeNotesFilters_.get(index);  } else {
        return applicationOutcomeNotesFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder> 
         getApplicationOutcomeNotesFiltersOrBuilderList() {
      if (applicationOutcomeNotesFiltersBuilder_ != null) {
        return applicationOutcomeNotesFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(applicationOutcomeNotesFilters_);
      }
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder addApplicationOutcomeNotesFiltersBuilder() {
      return getApplicationOutcomeNotesFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder addApplicationOutcomeNotesFiltersBuilder(
        int index) {
      return getApplicationOutcomeNotesFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application outcome notes filters specify the notes for the outcome of
     * the job application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter application_outcome_notes_filters = 11;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder> 
         getApplicationOutcomeNotesFiltersBuilderList() {
      return getApplicationOutcomeNotesFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder> 
        getApplicationOutcomeNotesFiltersFieldBuilder() {
      if (applicationOutcomeNotesFiltersBuilder_ == null) {
        applicationOutcomeNotesFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilterOrBuilder>(
                applicationOutcomeNotesFilters_,
                ((bitField0_ & 0x00000100) != 0),
                getParentForChildren(),
                isClean());
        applicationOutcomeNotesFilters_ = null;
      }
      return applicationOutcomeNotesFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.ApplicationJobFilter> applicationJobFilters_ =
      java.util.Collections.emptyList();
    private void ensureApplicationJobFiltersIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        applicationJobFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.ApplicationJobFilter>(applicationJobFilters_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationJobFilter, com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder> applicationJobFiltersBuilder_;

    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationJobFilter> getApplicationJobFiltersList() {
      if (applicationJobFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(applicationJobFilters_);
      } else {
        return applicationJobFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public int getApplicationJobFiltersCount() {
      if (applicationJobFiltersBuilder_ == null) {
        return applicationJobFilters_.size();
      } else {
        return applicationJobFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationJobFilter getApplicationJobFilters(int index) {
      if (applicationJobFiltersBuilder_ == null) {
        return applicationJobFilters_.get(index);
      } else {
        return applicationJobFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder setApplicationJobFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationJobFilter value) {
      if (applicationJobFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.set(index, value);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder setApplicationJobFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder builderForValue) {
      if (applicationJobFiltersBuilder_ == null) {
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        applicationJobFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder addApplicationJobFilters(com.google.cloud.talent.v4beta1.ApplicationJobFilter value) {
      if (applicationJobFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.add(value);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder addApplicationJobFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationJobFilter value) {
      if (applicationJobFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.add(index, value);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder addApplicationJobFilters(
        com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder builderForValue) {
      if (applicationJobFiltersBuilder_ == null) {
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.add(builderForValue.build());
        onChanged();
      } else {
        applicationJobFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder addApplicationJobFilters(
        int index, com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder builderForValue) {
      if (applicationJobFiltersBuilder_ == null) {
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        applicationJobFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder addAllApplicationJobFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.ApplicationJobFilter> values) {
      if (applicationJobFiltersBuilder_ == null) {
        ensureApplicationJobFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, applicationJobFilters_);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder clearApplicationJobFilters() {
      if (applicationJobFiltersBuilder_ == null) {
        applicationJobFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public Builder removeApplicationJobFilters(int index) {
      if (applicationJobFiltersBuilder_ == null) {
        ensureApplicationJobFiltersIsMutable();
        applicationJobFilters_.remove(index);
        onChanged();
      } else {
        applicationJobFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder getApplicationJobFiltersBuilder(
        int index) {
      return getApplicationJobFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder getApplicationJobFiltersOrBuilder(
        int index) {
      if (applicationJobFiltersBuilder_ == null) {
        return applicationJobFilters_.get(index);  } else {
        return applicationJobFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder> 
         getApplicationJobFiltersOrBuilderList() {
      if (applicationJobFiltersBuilder_ != null) {
        return applicationJobFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(applicationJobFilters_);
      }
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder addApplicationJobFiltersBuilder() {
      return getApplicationJobFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.ApplicationJobFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder addApplicationJobFiltersBuilder(
        int index) {
      return getApplicationJobFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.ApplicationJobFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The application job filters specify the job applied for in the application.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.ApplicationJobFilter application_job_filters = 13;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder> 
         getApplicationJobFiltersBuilderList() {
      return getApplicationJobFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ApplicationJobFilter, com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder> 
        getApplicationJobFiltersFieldBuilder() {
      if (applicationJobFiltersBuilder_ == null) {
        applicationJobFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.ApplicationJobFilter, com.google.cloud.talent.v4beta1.ApplicationJobFilter.Builder, com.google.cloud.talent.v4beta1.ApplicationJobFilterOrBuilder>(
                applicationJobFilters_,
                ((bitField0_ & 0x00000200) != 0),
                getParentForChildren(),
                isClean());
        applicationJobFilters_ = null;
      }
      return applicationJobFiltersBuilder_;
    }

    private java.lang.Object customAttributeFilter_ = "";
    /**
     * <pre>
     * This filter specifies a structured syntax to match against the
     * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
     * The syntax for this expression is a subset of Google SQL syntax.
     * String custom attributes: supported operators are =, != where the left of
     * the operator is a custom field key and the right of the operator is a
     * string (surrounded by quotes) value.
     * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
     * operators where the left of the operator is a custom field key and the
     * right of the operator is a numeric value.
     * Supported functions are LOWER(&lt;field_name&gt;) to
     * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
     * existence of a key.
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
     * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
     * a maximum of 50 comparisons/functions in the expression. The expression
     * must be &lt; 2000 characters in length.
     * Sample Query:
     * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
     * </pre>
     *
     * <code>string custom_attribute_filter = 15;</code>
     * @return The customAttributeFilter.
     */
    public java.lang.String getCustomAttributeFilter() {
      java.lang.Object ref = customAttributeFilter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        customAttributeFilter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * This filter specifies a structured syntax to match against the
     * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
     * The syntax for this expression is a subset of Google SQL syntax.
     * String custom attributes: supported operators are =, != where the left of
     * the operator is a custom field key and the right of the operator is a
     * string (surrounded by quotes) value.
     * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
     * operators where the left of the operator is a custom field key and the
     * right of the operator is a numeric value.
     * Supported functions are LOWER(&lt;field_name&gt;) to
     * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
     * existence of a key.
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
     * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
     * a maximum of 50 comparisons/functions in the expression. The expression
     * must be &lt; 2000 characters in length.
     * Sample Query:
     * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
     * </pre>
     *
     * <code>string custom_attribute_filter = 15;</code>
     * @return The bytes for customAttributeFilter.
     */
    public com.google.protobuf.ByteString
        getCustomAttributeFilterBytes() {
      java.lang.Object ref = customAttributeFilter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        customAttributeFilter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This filter specifies a structured syntax to match against the
     * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
     * The syntax for this expression is a subset of Google SQL syntax.
     * String custom attributes: supported operators are =, != where the left of
     * the operator is a custom field key and the right of the operator is a
     * string (surrounded by quotes) value.
     * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
     * operators where the left of the operator is a custom field key and the
     * right of the operator is a numeric value.
     * Supported functions are LOWER(&lt;field_name&gt;) to
     * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
     * existence of a key.
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
     * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
     * a maximum of 50 comparisons/functions in the expression. The expression
     * must be &lt; 2000 characters in length.
     * Sample Query:
     * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
     * </pre>
     *
     * <code>string custom_attribute_filter = 15;</code>
     * @param value The customAttributeFilter to set.
     * @return This builder for chaining.
     */
    public Builder setCustomAttributeFilter(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      customAttributeFilter_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This filter specifies a structured syntax to match against the
     * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
     * The syntax for this expression is a subset of Google SQL syntax.
     * String custom attributes: supported operators are =, != where the left of
     * the operator is a custom field key and the right of the operator is a
     * string (surrounded by quotes) value.
     * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
     * operators where the left of the operator is a custom field key and the
     * right of the operator is a numeric value.
     * Supported functions are LOWER(&lt;field_name&gt;) to
     * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
     * existence of a key.
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
     * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
     * a maximum of 50 comparisons/functions in the expression. The expression
     * must be &lt; 2000 characters in length.
     * Sample Query:
     * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
     * </pre>
     *
     * <code>string custom_attribute_filter = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearCustomAttributeFilter() {
      
      customAttributeFilter_ = getDefaultInstance().getCustomAttributeFilter();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This filter specifies a structured syntax to match against the
     * [Profile.custom_attributes][google.cloud.talent.v4beta1.Profile.custom_attributes] that are marked as `filterable`.
     * The syntax for this expression is a subset of Google SQL syntax.
     * String custom attributes: supported operators are =, != where the left of
     * the operator is a custom field key and the right of the operator is a
     * string (surrounded by quotes) value.
     * Numeric custom attributes: Supported operators are '&gt;', '&lt;' or '='
     * operators where the left of the operator is a custom field key and the
     * right of the operator is a numeric value.
     * Supported functions are LOWER(&lt;field_name&gt;) to
     * perform case insensitive match and EMPTY(&lt;field_name&gt;) to filter on the
     * existence of a key.
     * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
     * nesting (for example "((A AND B AND C) OR NOT D) AND E"), and there can be
     * a maximum of 50 comparisons/functions in the expression. The expression
     * must be &lt; 2000 characters in length.
     * Sample Query:
     * (key1 = "TEST" OR LOWER(key1)="test" OR NOT EMPTY(key1))
     * </pre>
     *
     * <code>string custom_attribute_filter = 15;</code>
     * @param value The bytes for customAttributeFilter to set.
     * @return This builder for chaining.
     */
    public Builder setCustomAttributeFilterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      customAttributeFilter_ = value;
      onChanged();
      return this;
    }

    private com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidateAvailabilityFilter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilterOrBuilder> candidateAvailabilityFilterBuilder_;
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     * @return Whether the candidateAvailabilityFilter field is set.
     */
    @java.lang.Deprecated public boolean hasCandidateAvailabilityFilter() {
      return candidateAvailabilityFilterBuilder_ != null || candidateAvailabilityFilter_ != null;
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     * @return The candidateAvailabilityFilter.
     */
    @java.lang.Deprecated public com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter getCandidateAvailabilityFilter() {
      if (candidateAvailabilityFilterBuilder_ == null) {
        return candidateAvailabilityFilter_ == null ? com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.getDefaultInstance() : candidateAvailabilityFilter_;
      } else {
        return candidateAvailabilityFilterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setCandidateAvailabilityFilter(com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter value) {
      if (candidateAvailabilityFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        candidateAvailabilityFilter_ = value;
        onChanged();
      } else {
        candidateAvailabilityFilterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setCandidateAvailabilityFilter(
        com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder builderForValue) {
      if (candidateAvailabilityFilterBuilder_ == null) {
        candidateAvailabilityFilter_ = builderForValue.build();
        onChanged();
      } else {
        candidateAvailabilityFilterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergeCandidateAvailabilityFilter(com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter value) {
      if (candidateAvailabilityFilterBuilder_ == null) {
        if (candidateAvailabilityFilter_ != null) {
          candidateAvailabilityFilter_ =
            com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.newBuilder(candidateAvailabilityFilter_).mergeFrom(value).buildPartial();
        } else {
          candidateAvailabilityFilter_ = value;
        }
        onChanged();
      } else {
        candidateAvailabilityFilterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearCandidateAvailabilityFilter() {
      if (candidateAvailabilityFilterBuilder_ == null) {
        candidateAvailabilityFilter_ = null;
        onChanged();
      } else {
        candidateAvailabilityFilter_ = null;
        candidateAvailabilityFilterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder getCandidateAvailabilityFilterBuilder() {
      
      onChanged();
      return getCandidateAvailabilityFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.cloud.talent.v4beta1.CandidateAvailabilityFilterOrBuilder getCandidateAvailabilityFilterOrBuilder() {
      if (candidateAvailabilityFilterBuilder_ != null) {
        return candidateAvailabilityFilterBuilder_.getMessageOrBuilder();
      } else {
        return candidateAvailabilityFilter_ == null ?
            com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.getDefaultInstance() : candidateAvailabilityFilter_;
      }
    }
    /**
     * <pre>
     * Deprecated. Use availability_filters instead.
     * The candidate availability filter which filters based on availability
     * signals.
     * Signal 1: Number of days since most recent job application.  See
     * [Availability.JobApplicationAvailabilitySignal][google.cloud.talent.v4beta1.Availability.JobApplicationAvailabilitySignal] for the details of this
     * signal.
     * Signal 2: Number of days since last profile update. See
     * [Availability.ProfileUpdateAvailabilitySignal][google.cloud.talent.v4beta1.Availability.ProfileUpdateAvailabilitySignal]
     * for the details of this signal.
     * The candidate availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.CandidateAvailabilityFilter candidate_availability_filter = 16 [deprecated = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilterOrBuilder> 
        getCandidateAvailabilityFilterFieldBuilder() {
      if (candidateAvailabilityFilterBuilder_ == null) {
        candidateAvailabilityFilterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.CandidateAvailabilityFilterOrBuilder>(
                getCandidateAvailabilityFilter(),
                getParentForChildren(),
                isClean());
        candidateAvailabilityFilter_ = null;
      }
      return candidateAvailabilityFilterBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.AvailabilityFilter> availabilityFilters_ =
      java.util.Collections.emptyList();
    private void ensureAvailabilityFiltersIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        availabilityFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.AvailabilityFilter>(availabilityFilters_);
        bitField0_ |= 0x00000400;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.AvailabilityFilter, com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder> availabilityFiltersBuilder_;

    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.AvailabilityFilter> getAvailabilityFiltersList() {
      if (availabilityFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(availabilityFilters_);
      } else {
        return availabilityFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public int getAvailabilityFiltersCount() {
      if (availabilityFiltersBuilder_ == null) {
        return availabilityFilters_.size();
      } else {
        return availabilityFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public com.google.cloud.talent.v4beta1.AvailabilityFilter getAvailabilityFilters(int index) {
      if (availabilityFiltersBuilder_ == null) {
        return availabilityFilters_.get(index);
      } else {
        return availabilityFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder setAvailabilityFilters(
        int index, com.google.cloud.talent.v4beta1.AvailabilityFilter value) {
      if (availabilityFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.set(index, value);
        onChanged();
      } else {
        availabilityFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder setAvailabilityFilters(
        int index, com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder builderForValue) {
      if (availabilityFiltersBuilder_ == null) {
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        availabilityFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder addAvailabilityFilters(com.google.cloud.talent.v4beta1.AvailabilityFilter value) {
      if (availabilityFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.add(value);
        onChanged();
      } else {
        availabilityFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder addAvailabilityFilters(
        int index, com.google.cloud.talent.v4beta1.AvailabilityFilter value) {
      if (availabilityFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.add(index, value);
        onChanged();
      } else {
        availabilityFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder addAvailabilityFilters(
        com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder builderForValue) {
      if (availabilityFiltersBuilder_ == null) {
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.add(builderForValue.build());
        onChanged();
      } else {
        availabilityFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder addAvailabilityFilters(
        int index, com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder builderForValue) {
      if (availabilityFiltersBuilder_ == null) {
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        availabilityFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder addAllAvailabilityFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.AvailabilityFilter> values) {
      if (availabilityFiltersBuilder_ == null) {
        ensureAvailabilityFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, availabilityFilters_);
        onChanged();
      } else {
        availabilityFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder clearAvailabilityFilters() {
      if (availabilityFiltersBuilder_ == null) {
        availabilityFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
      } else {
        availabilityFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public Builder removeAvailabilityFilters(int index) {
      if (availabilityFiltersBuilder_ == null) {
        ensureAvailabilityFiltersIsMutable();
        availabilityFilters_.remove(index);
        onChanged();
      } else {
        availabilityFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder getAvailabilityFiltersBuilder(
        int index) {
      return getAvailabilityFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder getAvailabilityFiltersOrBuilder(
        int index) {
      if (availabilityFiltersBuilder_ == null) {
        return availabilityFilters_.get(index);  } else {
        return availabilityFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder> 
         getAvailabilityFiltersOrBuilderList() {
      if (availabilityFiltersBuilder_ != null) {
        return availabilityFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(availabilityFilters_);
      }
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder addAvailabilityFiltersBuilder() {
      return getAvailabilityFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.AvailabilityFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder addAvailabilityFiltersBuilder(
        int index) {
      return getAvailabilityFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.AvailabilityFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * The availability filter which filters based on
     * [Profile.availability_signals][google.cloud.talent.v4beta1.Profile.availability_signals].
     * The availability filter helps a recruiter understand if a
     * specific candidate is likely to be actively seeking new job opportunities
     * based on an aggregated set of signals.  Specifically, the intent is NOT to
     * indicate the candidate's potential qualification / interest / close ability
     * for a specific job.
     * There can be at most one [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] per
     * [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type]. If there are multiple
     * [AvailabilityFilter][google.cloud.talent.v4beta1.AvailabilityFilter] for a [signal_type][google.cloud.talent.v4beta1.AvailabilityFilter.signal_type],
     * an error is thrown.
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.AvailabilityFilter availability_filters = 18;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder> 
         getAvailabilityFiltersBuilderList() {
      return getAvailabilityFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.AvailabilityFilter, com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder> 
        getAvailabilityFiltersFieldBuilder() {
      if (availabilityFiltersBuilder_ == null) {
        availabilityFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.AvailabilityFilter, com.google.cloud.talent.v4beta1.AvailabilityFilter.Builder, com.google.cloud.talent.v4beta1.AvailabilityFilterOrBuilder>(
                availabilityFilters_,
                ((bitField0_ & 0x00000400) != 0),
                getParentForChildren(),
                isClean());
        availabilityFilters_ = null;
      }
      return availabilityFiltersBuilder_;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.PersonNameFilter> personNameFilters_ =
      java.util.Collections.emptyList();
    private void ensurePersonNameFiltersIsMutable() {
      if (!((bitField0_ & 0x00000800) != 0)) {
        personNameFilters_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.PersonNameFilter>(personNameFilters_);
        bitField0_ |= 0x00000800;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.PersonNameFilter, com.google.cloud.talent.v4beta1.PersonNameFilter.Builder, com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder> personNameFiltersBuilder_;

    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.PersonNameFilter> getPersonNameFiltersList() {
      if (personNameFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(personNameFilters_);
      } else {
        return personNameFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public int getPersonNameFiltersCount() {
      if (personNameFiltersBuilder_ == null) {
        return personNameFilters_.size();
      } else {
        return personNameFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public com.google.cloud.talent.v4beta1.PersonNameFilter getPersonNameFilters(int index) {
      if (personNameFiltersBuilder_ == null) {
        return personNameFilters_.get(index);
      } else {
        return personNameFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder setPersonNameFilters(
        int index, com.google.cloud.talent.v4beta1.PersonNameFilter value) {
      if (personNameFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.set(index, value);
        onChanged();
      } else {
        personNameFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder setPersonNameFilters(
        int index, com.google.cloud.talent.v4beta1.PersonNameFilter.Builder builderForValue) {
      if (personNameFiltersBuilder_ == null) {
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        personNameFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder addPersonNameFilters(com.google.cloud.talent.v4beta1.PersonNameFilter value) {
      if (personNameFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.add(value);
        onChanged();
      } else {
        personNameFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder addPersonNameFilters(
        int index, com.google.cloud.talent.v4beta1.PersonNameFilter value) {
      if (personNameFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.add(index, value);
        onChanged();
      } else {
        personNameFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder addPersonNameFilters(
        com.google.cloud.talent.v4beta1.PersonNameFilter.Builder builderForValue) {
      if (personNameFiltersBuilder_ == null) {
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.add(builderForValue.build());
        onChanged();
      } else {
        personNameFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder addPersonNameFilters(
        int index, com.google.cloud.talent.v4beta1.PersonNameFilter.Builder builderForValue) {
      if (personNameFiltersBuilder_ == null) {
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        personNameFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder addAllPersonNameFilters(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.PersonNameFilter> values) {
      if (personNameFiltersBuilder_ == null) {
        ensurePersonNameFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, personNameFilters_);
        onChanged();
      } else {
        personNameFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder clearPersonNameFilters() {
      if (personNameFiltersBuilder_ == null) {
        personNameFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
      } else {
        personNameFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public Builder removePersonNameFilters(int index) {
      if (personNameFiltersBuilder_ == null) {
        ensurePersonNameFiltersIsMutable();
        personNameFilters_.remove(index);
        onChanged();
      } else {
        personNameFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public com.google.cloud.talent.v4beta1.PersonNameFilter.Builder getPersonNameFiltersBuilder(
        int index) {
      return getPersonNameFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder getPersonNameFiltersOrBuilder(
        int index) {
      if (personNameFiltersBuilder_ == null) {
        return personNameFilters_.get(index);  } else {
        return personNameFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder> 
         getPersonNameFiltersOrBuilderList() {
      if (personNameFiltersBuilder_ != null) {
        return personNameFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(personNameFilters_);
      }
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public com.google.cloud.talent.v4beta1.PersonNameFilter.Builder addPersonNameFiltersBuilder() {
      return getPersonNameFiltersFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.PersonNameFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public com.google.cloud.talent.v4beta1.PersonNameFilter.Builder addPersonNameFiltersBuilder(
        int index) {
      return getPersonNameFiltersFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.PersonNameFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Person name filter specifies person name of profiles to match on.
     * If multiple person name filters are specified, profiles that match any
     * person name filters are retrieved.
     * For example, search for profiles of candidates with name "John Smith".
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.PersonNameFilter person_name_filters = 17;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.PersonNameFilter.Builder> 
         getPersonNameFiltersBuilderList() {
      return getPersonNameFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.PersonNameFilter, com.google.cloud.talent.v4beta1.PersonNameFilter.Builder, com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder> 
        getPersonNameFiltersFieldBuilder() {
      if (personNameFiltersBuilder_ == null) {
        personNameFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.PersonNameFilter, com.google.cloud.talent.v4beta1.PersonNameFilter.Builder, com.google.cloud.talent.v4beta1.PersonNameFilterOrBuilder>(
                personNameFilters_,
                ((bitField0_ & 0x00000800) != 0),
                getParentForChildren(),
                isClean());
        personNameFilters_ = null;
      }
      return personNameFiltersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.talent.v4beta1.ProfileQuery)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.talent.v4beta1.ProfileQuery)
  private static final com.google.cloud.talent.v4beta1.ProfileQuery DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.talent.v4beta1.ProfileQuery();
  }

  public static com.google.cloud.talent.v4beta1.ProfileQuery getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ProfileQuery>
      PARSER = new com.google.protobuf.AbstractParser<ProfileQuery>() {
    @java.lang.Override
    public ProfileQuery parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ProfileQuery(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ProfileQuery> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ProfileQuery> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ProfileQuery getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

