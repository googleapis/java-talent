// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/talent/v4beta1/profile_service.proto

package com.google.cloud.talent.v4beta1;

/**
 * <pre>
 * The request body of the `SearchProfiles` call.
 * </pre>
 *
 * Protobuf type {@code google.cloud.talent.v4beta1.SearchProfilesRequest}
 */
public final class SearchProfilesRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.talent.v4beta1.SearchProfilesRequest)
    SearchProfilesRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SearchProfilesRequest.newBuilder() to construct.
  private SearchProfilesRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SearchProfilesRequest() {
    parent_ = "";
    pageToken_ = "";
    orderBy_ = "";
    histogramQueries_ = java.util.Collections.emptyList();
    resultSetId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SearchProfilesRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SearchProfilesRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            parent_ = s;
            break;
          }
          case 18: {
            com.google.cloud.talent.v4beta1.RequestMetadata.Builder subBuilder = null;
            if (requestMetadata_ != null) {
              subBuilder = requestMetadata_.toBuilder();
            }
            requestMetadata_ = input.readMessage(com.google.cloud.talent.v4beta1.RequestMetadata.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(requestMetadata_);
              requestMetadata_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.cloud.talent.v4beta1.ProfileQuery.Builder subBuilder = null;
            if (profileQuery_ != null) {
              subBuilder = profileQuery_.toBuilder();
            }
            profileQuery_ = input.readMessage(com.google.cloud.talent.v4beta1.ProfileQuery.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(profileQuery_);
              profileQuery_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            pageSize_ = input.readInt32();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            pageToken_ = s;
            break;
          }
          case 48: {

            offset_ = input.readInt32();
            break;
          }
          case 56: {

            disableSpellCheck_ = input.readBool();
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            orderBy_ = s;
            break;
          }
          case 72: {

            caseSensitiveSort_ = input.readBool();
            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              histogramQueries_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.HistogramQuery>();
              mutable_bitField0_ |= 0x00000001;
            }
            histogramQueries_.add(
                input.readMessage(com.google.cloud.talent.v4beta1.HistogramQuery.parser(), extensionRegistry));
            break;
          }
          case 98: {
            java.lang.String s = input.readStringRequireUtf8();

            resultSetId_ = s;
            break;
          }
          case 104: {

            strictKeywordsSearch_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        histogramQueries_ = java.util.Collections.unmodifiableList(histogramQueries_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.talent.v4beta1.ProfileServiceProto.internal_static_google_cloud_talent_v4beta1_SearchProfilesRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.talent.v4beta1.ProfileServiceProto.internal_static_google_cloud_talent_v4beta1_SearchProfilesRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.talent.v4beta1.SearchProfilesRequest.class, com.google.cloud.talent.v4beta1.SearchProfilesRequest.Builder.class);
  }

  public static final int PARENT_FIELD_NUMBER = 1;
  private volatile java.lang.Object parent_;
  /**
   * <pre>
   * Required. The resource name of the tenant to search within.
   * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   * "projects/foo/tenants/bar".
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The parent.
   */
  @java.lang.Override
  public java.lang.String getParent() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parent_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The resource name of the tenant to search within.
   * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
   * "projects/foo/tenants/bar".
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for parent.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getParentBytes() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      parent_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REQUEST_METADATA_FIELD_NUMBER = 2;
  private com.google.cloud.talent.v4beta1.RequestMetadata requestMetadata_;
  /**
   * <pre>
   * Required. The meta information collected about the profile search user. This is used
   * to improve the search quality of the service. These values are provided by
   * users, and must be precise and consistent.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the requestMetadata field is set.
   */
  @java.lang.Override
  public boolean hasRequestMetadata() {
    return requestMetadata_ != null;
  }
  /**
   * <pre>
   * Required. The meta information collected about the profile search user. This is used
   * to improve the search quality of the service. These values are provided by
   * users, and must be precise and consistent.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The requestMetadata.
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.RequestMetadata getRequestMetadata() {
    return requestMetadata_ == null ? com.google.cloud.talent.v4beta1.RequestMetadata.getDefaultInstance() : requestMetadata_;
  }
  /**
   * <pre>
   * Required. The meta information collected about the profile search user. This is used
   * to improve the search quality of the service. These values are provided by
   * users, and must be precise and consistent.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.RequestMetadataOrBuilder getRequestMetadataOrBuilder() {
    return getRequestMetadata();
  }

  public static final int PROFILE_QUERY_FIELD_NUMBER = 3;
  private com.google.cloud.talent.v4beta1.ProfileQuery profileQuery_;
  /**
   * <pre>
   * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
   * @return Whether the profileQuery field is set.
   */
  @java.lang.Override
  public boolean hasProfileQuery() {
    return profileQuery_ != null;
  }
  /**
   * <pre>
   * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
   * @return The profileQuery.
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ProfileQuery getProfileQuery() {
    return profileQuery_ == null ? com.google.cloud.talent.v4beta1.ProfileQuery.getDefaultInstance() : profileQuery_;
  }
  /**
   * <pre>
   * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
   * </pre>
   *
   * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder getProfileQueryOrBuilder() {
    return getProfileQuery();
  }

  public static final int PAGE_SIZE_FIELD_NUMBER = 4;
  private int pageSize_;
  /**
   * <pre>
   * A limit on the number of profiles returned in the search results.
   * A value above the default value 10 can increase search response time.
   * The maximum value allowed is 100. Otherwise an error is thrown.
   * </pre>
   *
   * <code>int32 page_size = 4;</code>
   * @return The pageSize.
   */
  @java.lang.Override
  public int getPageSize() {
    return pageSize_;
  }

  public static final int PAGE_TOKEN_FIELD_NUMBER = 5;
  private volatile java.lang.Object pageToken_;
  /**
   * <pre>
   * The pageToken, similar to offset enables users of the API to paginate
   * through the search results. To retrieve the first page of results, set the
   * pageToken to empty. The search response includes a
   * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
   * used to populate the pageToken field for the next page of results. Using
   * pageToken instead of offset increases the performance of the API,
   * especially compared to larger offset values.
   * </pre>
   *
   * <code>string page_token = 5;</code>
   * @return The pageToken.
   */
  @java.lang.Override
  public java.lang.String getPageToken() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pageToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The pageToken, similar to offset enables users of the API to paginate
   * through the search results. To retrieve the first page of results, set the
   * pageToken to empty. The search response includes a
   * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
   * used to populate the pageToken field for the next page of results. Using
   * pageToken instead of offset increases the performance of the API,
   * especially compared to larger offset values.
   * </pre>
   *
   * <code>string page_token = 5;</code>
   * @return The bytes for pageToken.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPageTokenBytes() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pageToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OFFSET_FIELD_NUMBER = 6;
  private int offset_;
  /**
   * <pre>
   * An integer that specifies the current offset (that is, starting result) in
   * search results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token] is unset.
   * The maximum allowed value is 5000. Otherwise an error is thrown.
   * For example, 0 means to search from the first profile, and 10 means to
   * search from the 11th profile. This can be used for pagination, for example
   * pageSize = 10 and offset = 10 means to search from the second page.
   * </pre>
   *
   * <code>int32 offset = 6;</code>
   * @return The offset.
   */
  @java.lang.Override
  public int getOffset() {
    return offset_;
  }

  public static final int DISABLE_SPELL_CHECK_FIELD_NUMBER = 7;
  private boolean disableSpellCheck_;
  /**
   * <pre>
   * This flag controls the spell-check feature. If `false`, the
   * service attempts to correct a misspelled query.
   * For example, "enginee" is corrected to "engineer".
   * </pre>
   *
   * <code>bool disable_spell_check = 7;</code>
   * @return The disableSpellCheck.
   */
  @java.lang.Override
  public boolean getDisableSpellCheck() {
    return disableSpellCheck_;
  }

  public static final int ORDER_BY_FIELD_NUMBER = 8;
  private volatile java.lang.Object orderBy_;
  /**
   * <pre>
   * The criteria that determines how search results are sorted.
   * Defaults is "relevance desc" if no value is specified.
   * Supported options are:
   * * "relevance desc": By descending relevance, as determined by the API
   *    algorithms.
   * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
   *   (recently updated profiles first).
   * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
   *   (recently created profiles first).
   * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
   *   ascending order.
   * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
   *   in descending order.
   * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
   *   ascending order.
   * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
   *   in ascending order.
   * </pre>
   *
   * <code>string order_by = 8;</code>
   * @return The orderBy.
   */
  @java.lang.Override
  public java.lang.String getOrderBy() {
    java.lang.Object ref = orderBy_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      orderBy_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The criteria that determines how search results are sorted.
   * Defaults is "relevance desc" if no value is specified.
   * Supported options are:
   * * "relevance desc": By descending relevance, as determined by the API
   *    algorithms.
   * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
   *   (recently updated profiles first).
   * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
   *   (recently created profiles first).
   * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
   *   ascending order.
   * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
   *   in descending order.
   * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
   *   ascending order.
   * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
   *   in ascending order.
   * </pre>
   *
   * <code>string order_by = 8;</code>
   * @return The bytes for orderBy.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOrderByBytes() {
    java.lang.Object ref = orderBy_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      orderBy_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CASE_SENSITIVE_SORT_FIELD_NUMBER = 9;
  private boolean caseSensitiveSort_;
  /**
   * <pre>
   * When sort by field is based on alphabetical order, sort values case
   * sensitively (based on ASCII) when the value is set to true. Default value
   * is case in-sensitive sort (false).
   * </pre>
   *
   * <code>bool case_sensitive_sort = 9;</code>
   * @return The caseSensitiveSort.
   */
  @java.lang.Override
  public boolean getCaseSensitiveSort() {
    return caseSensitiveSort_;
  }

  public static final int HISTOGRAM_QUERIES_FIELD_NUMBER = 10;
  private java.util.List<com.google.cloud.talent.v4beta1.HistogramQuery> histogramQueries_;
  /**
   * <pre>
   * A list of expressions specifies histogram requests against matching
   * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
   * The expression syntax looks like a function definition with parameters.
   * Function syntax: function_name(histogram_facet[, list of buckets])
   * Data types:
   * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
   * * String: string like "any string with backslash escape for quote(&#92;")."
   * * Number: whole number and floating point number like 10, -1 and -0.01.
   * * List: list of elements with comma(,) separator surrounded by square
   * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
   * Built-in constants:
   * * MIN (minimum number similar to java Double.MIN_VALUE)
   * * MAX (maximum number similar to java Double.MAX_VALUE)
   * Built-in functions:
   * * bucket(start, end[, label])
   * Bucket build-in function creates a bucket with range of [start, end). Note
   * that the end is exclusive.
   * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
   * Histogram Facets:
   * * admin1: Admin1 is a global placeholder for referring to state, province,
   * or the particular term a country uses to define the geographic structure
   * below the country level. Examples include states codes such as "CA", "IL",
   * "NY", and provinces, such as "BC".
   * * locality: Locality is a global placeholder for referring to city, town,
   * or the particular term a country uses to define the geographic structure
   * below the admin1 level. Examples include city names such as
   * "Mountain View" and "New York".
   * * extended_locality: Extended locality is concatenated version of admin1
   * and locality with comma separator. For example, "Mountain View, CA" and
   * "New York, NY".
   * * postal_code: Postal code of profile which follows locale code.
   * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
   *  JP, GB.
   * * job_title: Normalized job titles specified in EmploymentHistory.
   * * company_name: Normalized company name of profiles to match on.
   * * institution: The school name. For example, "MIT",
   * "University of California, Berkeley"
   * * degree: Highest education degree in ISCED code. Each value in degree
   * covers a specific level of education, without any expansion to upper nor
   * lower levels of education degree.
   * * experience_in_months: experience in months. 0 means 0 month to 1 month
   * (exclusive).
   * * application_date: The application date specifies application start dates.
   * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
   * * application_outcome_notes: The application outcome reason specifies the
   * reasons behind the outcome of the job application.
   * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
   * * application_job_title: The application job title specifies the job
   * applied for in the application.
   * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
   * * hirable_status: Hirable status specifies the profile's hirable status.
   * * string_custom_attribute: String custom attributes. Values can be accessed
   * via square bracket notation like string_custom_attribute["key1"].
   * * numeric_custom_attribute: Numeric custom attributes. Values can be
   * accessed via square bracket notation like numeric_custom_attribute["key1"].
   * Example expressions:
   * * count(admin1)
   * * count(experience_in_months, [bucket(0, 12, "1 year"),
   * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
   * * count(string_custom_attribute["assigned_recruiter"])
   * * count(numeric_custom_attribute["favorite_number"],
   * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.cloud.talent.v4beta1.HistogramQuery> getHistogramQueriesList() {
    return histogramQueries_;
  }
  /**
   * <pre>
   * A list of expressions specifies histogram requests against matching
   * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
   * The expression syntax looks like a function definition with parameters.
   * Function syntax: function_name(histogram_facet[, list of buckets])
   * Data types:
   * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
   * * String: string like "any string with backslash escape for quote(&#92;")."
   * * Number: whole number and floating point number like 10, -1 and -0.01.
   * * List: list of elements with comma(,) separator surrounded by square
   * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
   * Built-in constants:
   * * MIN (minimum number similar to java Double.MIN_VALUE)
   * * MAX (maximum number similar to java Double.MAX_VALUE)
   * Built-in functions:
   * * bucket(start, end[, label])
   * Bucket build-in function creates a bucket with range of [start, end). Note
   * that the end is exclusive.
   * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
   * Histogram Facets:
   * * admin1: Admin1 is a global placeholder for referring to state, province,
   * or the particular term a country uses to define the geographic structure
   * below the country level. Examples include states codes such as "CA", "IL",
   * "NY", and provinces, such as "BC".
   * * locality: Locality is a global placeholder for referring to city, town,
   * or the particular term a country uses to define the geographic structure
   * below the admin1 level. Examples include city names such as
   * "Mountain View" and "New York".
   * * extended_locality: Extended locality is concatenated version of admin1
   * and locality with comma separator. For example, "Mountain View, CA" and
   * "New York, NY".
   * * postal_code: Postal code of profile which follows locale code.
   * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
   *  JP, GB.
   * * job_title: Normalized job titles specified in EmploymentHistory.
   * * company_name: Normalized company name of profiles to match on.
   * * institution: The school name. For example, "MIT",
   * "University of California, Berkeley"
   * * degree: Highest education degree in ISCED code. Each value in degree
   * covers a specific level of education, without any expansion to upper nor
   * lower levels of education degree.
   * * experience_in_months: experience in months. 0 means 0 month to 1 month
   * (exclusive).
   * * application_date: The application date specifies application start dates.
   * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
   * * application_outcome_notes: The application outcome reason specifies the
   * reasons behind the outcome of the job application.
   * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
   * * application_job_title: The application job title specifies the job
   * applied for in the application.
   * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
   * * hirable_status: Hirable status specifies the profile's hirable status.
   * * string_custom_attribute: String custom attributes. Values can be accessed
   * via square bracket notation like string_custom_attribute["key1"].
   * * numeric_custom_attribute: Numeric custom attributes. Values can be
   * accessed via square bracket notation like numeric_custom_attribute["key1"].
   * Example expressions:
   * * count(admin1)
   * * count(experience_in_months, [bucket(0, 12, "1 year"),
   * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
   * * count(string_custom_attribute["assigned_recruiter"])
   * * count(numeric_custom_attribute["favorite_number"],
   * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder> 
      getHistogramQueriesOrBuilderList() {
    return histogramQueries_;
  }
  /**
   * <pre>
   * A list of expressions specifies histogram requests against matching
   * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
   * The expression syntax looks like a function definition with parameters.
   * Function syntax: function_name(histogram_facet[, list of buckets])
   * Data types:
   * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
   * * String: string like "any string with backslash escape for quote(&#92;")."
   * * Number: whole number and floating point number like 10, -1 and -0.01.
   * * List: list of elements with comma(,) separator surrounded by square
   * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
   * Built-in constants:
   * * MIN (minimum number similar to java Double.MIN_VALUE)
   * * MAX (maximum number similar to java Double.MAX_VALUE)
   * Built-in functions:
   * * bucket(start, end[, label])
   * Bucket build-in function creates a bucket with range of [start, end). Note
   * that the end is exclusive.
   * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
   * Histogram Facets:
   * * admin1: Admin1 is a global placeholder for referring to state, province,
   * or the particular term a country uses to define the geographic structure
   * below the country level. Examples include states codes such as "CA", "IL",
   * "NY", and provinces, such as "BC".
   * * locality: Locality is a global placeholder for referring to city, town,
   * or the particular term a country uses to define the geographic structure
   * below the admin1 level. Examples include city names such as
   * "Mountain View" and "New York".
   * * extended_locality: Extended locality is concatenated version of admin1
   * and locality with comma separator. For example, "Mountain View, CA" and
   * "New York, NY".
   * * postal_code: Postal code of profile which follows locale code.
   * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
   *  JP, GB.
   * * job_title: Normalized job titles specified in EmploymentHistory.
   * * company_name: Normalized company name of profiles to match on.
   * * institution: The school name. For example, "MIT",
   * "University of California, Berkeley"
   * * degree: Highest education degree in ISCED code. Each value in degree
   * covers a specific level of education, without any expansion to upper nor
   * lower levels of education degree.
   * * experience_in_months: experience in months. 0 means 0 month to 1 month
   * (exclusive).
   * * application_date: The application date specifies application start dates.
   * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
   * * application_outcome_notes: The application outcome reason specifies the
   * reasons behind the outcome of the job application.
   * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
   * * application_job_title: The application job title specifies the job
   * applied for in the application.
   * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
   * * hirable_status: Hirable status specifies the profile's hirable status.
   * * string_custom_attribute: String custom attributes. Values can be accessed
   * via square bracket notation like string_custom_attribute["key1"].
   * * numeric_custom_attribute: Numeric custom attributes. Values can be
   * accessed via square bracket notation like numeric_custom_attribute["key1"].
   * Example expressions:
   * * count(admin1)
   * * count(experience_in_months, [bucket(0, 12, "1 year"),
   * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
   * * count(string_custom_attribute["assigned_recruiter"])
   * * count(numeric_custom_attribute["favorite_number"],
   * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
   */
  @java.lang.Override
  public int getHistogramQueriesCount() {
    return histogramQueries_.size();
  }
  /**
   * <pre>
   * A list of expressions specifies histogram requests against matching
   * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
   * The expression syntax looks like a function definition with parameters.
   * Function syntax: function_name(histogram_facet[, list of buckets])
   * Data types:
   * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
   * * String: string like "any string with backslash escape for quote(&#92;")."
   * * Number: whole number and floating point number like 10, -1 and -0.01.
   * * List: list of elements with comma(,) separator surrounded by square
   * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
   * Built-in constants:
   * * MIN (minimum number similar to java Double.MIN_VALUE)
   * * MAX (maximum number similar to java Double.MAX_VALUE)
   * Built-in functions:
   * * bucket(start, end[, label])
   * Bucket build-in function creates a bucket with range of [start, end). Note
   * that the end is exclusive.
   * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
   * Histogram Facets:
   * * admin1: Admin1 is a global placeholder for referring to state, province,
   * or the particular term a country uses to define the geographic structure
   * below the country level. Examples include states codes such as "CA", "IL",
   * "NY", and provinces, such as "BC".
   * * locality: Locality is a global placeholder for referring to city, town,
   * or the particular term a country uses to define the geographic structure
   * below the admin1 level. Examples include city names such as
   * "Mountain View" and "New York".
   * * extended_locality: Extended locality is concatenated version of admin1
   * and locality with comma separator. For example, "Mountain View, CA" and
   * "New York, NY".
   * * postal_code: Postal code of profile which follows locale code.
   * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
   *  JP, GB.
   * * job_title: Normalized job titles specified in EmploymentHistory.
   * * company_name: Normalized company name of profiles to match on.
   * * institution: The school name. For example, "MIT",
   * "University of California, Berkeley"
   * * degree: Highest education degree in ISCED code. Each value in degree
   * covers a specific level of education, without any expansion to upper nor
   * lower levels of education degree.
   * * experience_in_months: experience in months. 0 means 0 month to 1 month
   * (exclusive).
   * * application_date: The application date specifies application start dates.
   * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
   * * application_outcome_notes: The application outcome reason specifies the
   * reasons behind the outcome of the job application.
   * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
   * * application_job_title: The application job title specifies the job
   * applied for in the application.
   * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
   * * hirable_status: Hirable status specifies the profile's hirable status.
   * * string_custom_attribute: String custom attributes. Values can be accessed
   * via square bracket notation like string_custom_attribute["key1"].
   * * numeric_custom_attribute: Numeric custom attributes. Values can be
   * accessed via square bracket notation like numeric_custom_attribute["key1"].
   * Example expressions:
   * * count(admin1)
   * * count(experience_in_months, [bucket(0, 12, "1 year"),
   * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
   * * count(string_custom_attribute["assigned_recruiter"])
   * * count(numeric_custom_attribute["favorite_number"],
   * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.HistogramQuery getHistogramQueries(int index) {
    return histogramQueries_.get(index);
  }
  /**
   * <pre>
   * A list of expressions specifies histogram requests against matching
   * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
   * The expression syntax looks like a function definition with parameters.
   * Function syntax: function_name(histogram_facet[, list of buckets])
   * Data types:
   * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
   * * String: string like "any string with backslash escape for quote(&#92;")."
   * * Number: whole number and floating point number like 10, -1 and -0.01.
   * * List: list of elements with comma(,) separator surrounded by square
   * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
   * Built-in constants:
   * * MIN (minimum number similar to java Double.MIN_VALUE)
   * * MAX (maximum number similar to java Double.MAX_VALUE)
   * Built-in functions:
   * * bucket(start, end[, label])
   * Bucket build-in function creates a bucket with range of [start, end). Note
   * that the end is exclusive.
   * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
   * Histogram Facets:
   * * admin1: Admin1 is a global placeholder for referring to state, province,
   * or the particular term a country uses to define the geographic structure
   * below the country level. Examples include states codes such as "CA", "IL",
   * "NY", and provinces, such as "BC".
   * * locality: Locality is a global placeholder for referring to city, town,
   * or the particular term a country uses to define the geographic structure
   * below the admin1 level. Examples include city names such as
   * "Mountain View" and "New York".
   * * extended_locality: Extended locality is concatenated version of admin1
   * and locality with comma separator. For example, "Mountain View, CA" and
   * "New York, NY".
   * * postal_code: Postal code of profile which follows locale code.
   * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
   *  JP, GB.
   * * job_title: Normalized job titles specified in EmploymentHistory.
   * * company_name: Normalized company name of profiles to match on.
   * * institution: The school name. For example, "MIT",
   * "University of California, Berkeley"
   * * degree: Highest education degree in ISCED code. Each value in degree
   * covers a specific level of education, without any expansion to upper nor
   * lower levels of education degree.
   * * experience_in_months: experience in months. 0 means 0 month to 1 month
   * (exclusive).
   * * application_date: The application date specifies application start dates.
   * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
   * * application_outcome_notes: The application outcome reason specifies the
   * reasons behind the outcome of the job application.
   * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
   * * application_job_title: The application job title specifies the job
   * applied for in the application.
   * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
   * * hirable_status: Hirable status specifies the profile's hirable status.
   * * string_custom_attribute: String custom attributes. Values can be accessed
   * via square bracket notation like string_custom_attribute["key1"].
   * * numeric_custom_attribute: Numeric custom attributes. Values can be
   * accessed via square bracket notation like numeric_custom_attribute["key1"].
   * Example expressions:
   * * count(admin1)
   * * count(experience_in_months, [bucket(0, 12, "1 year"),
   * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
   * * count(string_custom_attribute["assigned_recruiter"])
   * * count(numeric_custom_attribute["favorite_number"],
   * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
   * </pre>
   *
   * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
   */
  @java.lang.Override
  public com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder getHistogramQueriesOrBuilder(
      int index) {
    return histogramQueries_.get(index);
  }

  public static final int RESULT_SET_ID_FIELD_NUMBER = 12;
  private volatile java.lang.Object resultSetId_;
  /**
   * <pre>
   * An id that uniquely identifies the result set of a
   * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
   * retrieved from the
   * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
   * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
   * A result set is an ordered list of search results.
   * If this field is not set, a new result set is computed based on the
   * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
   * access this result set.
   * If this field is set, the service will ignore the resource and
   * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
   * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
   * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
   * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
   * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
   * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
   * </pre>
   *
   * <code>string result_set_id = 12;</code>
   * @return The resultSetId.
   */
  @java.lang.Override
  public java.lang.String getResultSetId() {
    java.lang.Object ref = resultSetId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      resultSetId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * An id that uniquely identifies the result set of a
   * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
   * retrieved from the
   * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
   * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
   * A result set is an ordered list of search results.
   * If this field is not set, a new result set is computed based on the
   * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
   * access this result set.
   * If this field is set, the service will ignore the resource and
   * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
   * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
   * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
   * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
   * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
   * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
   * </pre>
   *
   * <code>string result_set_id = 12;</code>
   * @return The bytes for resultSetId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getResultSetIdBytes() {
    java.lang.Object ref = resultSetId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      resultSetId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STRICT_KEYWORDS_SEARCH_FIELD_NUMBER = 13;
  private boolean strictKeywordsSearch_;
  /**
   * <pre>
   * This flag is used to indicate whether the service will attempt to
   * understand synonyms and terms related to the search query or treat the
   * query "as is" when it generates a set of results. By default this flag is
   * set to false, thus allowing expanded results to also be returned. For
   * example a search for "software engineer" might also return candidates who
   * have experience in jobs similar to software engineer positions. By setting
   * this flag to true, the service will only attempt to deliver candidates has
   * software engineer in his/her global fields by treating "software engineer"
   * as a keyword.
   * It is recommended to provide a feature in the UI (such as a checkbox) to
   * allow recruiters to set this flag to true if they intend to search for
   * longer boolean strings.
   * </pre>
   *
   * <code>bool strict_keywords_search = 13;</code>
   * @return The strictKeywordsSearch.
   */
  @java.lang.Override
  public boolean getStrictKeywordsSearch() {
    return strictKeywordsSearch_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getParentBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, parent_);
    }
    if (requestMetadata_ != null) {
      output.writeMessage(2, getRequestMetadata());
    }
    if (profileQuery_ != null) {
      output.writeMessage(3, getProfileQuery());
    }
    if (pageSize_ != 0) {
      output.writeInt32(4, pageSize_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, pageToken_);
    }
    if (offset_ != 0) {
      output.writeInt32(6, offset_);
    }
    if (disableSpellCheck_ != false) {
      output.writeBool(7, disableSpellCheck_);
    }
    if (!getOrderByBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, orderBy_);
    }
    if (caseSensitiveSort_ != false) {
      output.writeBool(9, caseSensitiveSort_);
    }
    for (int i = 0; i < histogramQueries_.size(); i++) {
      output.writeMessage(10, histogramQueries_.get(i));
    }
    if (!getResultSetIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, resultSetId_);
    }
    if (strictKeywordsSearch_ != false) {
      output.writeBool(13, strictKeywordsSearch_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getParentBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, parent_);
    }
    if (requestMetadata_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRequestMetadata());
    }
    if (profileQuery_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getProfileQuery());
    }
    if (pageSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, pageSize_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, pageToken_);
    }
    if (offset_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, offset_);
    }
    if (disableSpellCheck_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, disableSpellCheck_);
    }
    if (!getOrderByBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, orderBy_);
    }
    if (caseSensitiveSort_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, caseSensitiveSort_);
    }
    for (int i = 0; i < histogramQueries_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, histogramQueries_.get(i));
    }
    if (!getResultSetIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, resultSetId_);
    }
    if (strictKeywordsSearch_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(13, strictKeywordsSearch_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.talent.v4beta1.SearchProfilesRequest)) {
      return super.equals(obj);
    }
    com.google.cloud.talent.v4beta1.SearchProfilesRequest other = (com.google.cloud.talent.v4beta1.SearchProfilesRequest) obj;

    if (!getParent()
        .equals(other.getParent())) return false;
    if (hasRequestMetadata() != other.hasRequestMetadata()) return false;
    if (hasRequestMetadata()) {
      if (!getRequestMetadata()
          .equals(other.getRequestMetadata())) return false;
    }
    if (hasProfileQuery() != other.hasProfileQuery()) return false;
    if (hasProfileQuery()) {
      if (!getProfileQuery()
          .equals(other.getProfileQuery())) return false;
    }
    if (getPageSize()
        != other.getPageSize()) return false;
    if (!getPageToken()
        .equals(other.getPageToken())) return false;
    if (getOffset()
        != other.getOffset()) return false;
    if (getDisableSpellCheck()
        != other.getDisableSpellCheck()) return false;
    if (!getOrderBy()
        .equals(other.getOrderBy())) return false;
    if (getCaseSensitiveSort()
        != other.getCaseSensitiveSort()) return false;
    if (!getHistogramQueriesList()
        .equals(other.getHistogramQueriesList())) return false;
    if (!getResultSetId()
        .equals(other.getResultSetId())) return false;
    if (getStrictKeywordsSearch()
        != other.getStrictKeywordsSearch()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PARENT_FIELD_NUMBER;
    hash = (53 * hash) + getParent().hashCode();
    if (hasRequestMetadata()) {
      hash = (37 * hash) + REQUEST_METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getRequestMetadata().hashCode();
    }
    if (hasProfileQuery()) {
      hash = (37 * hash) + PROFILE_QUERY_FIELD_NUMBER;
      hash = (53 * hash) + getProfileQuery().hashCode();
    }
    hash = (37 * hash) + PAGE_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getPageSize();
    hash = (37 * hash) + PAGE_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getPageToken().hashCode();
    hash = (37 * hash) + OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + getOffset();
    hash = (37 * hash) + DISABLE_SPELL_CHECK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableSpellCheck());
    hash = (37 * hash) + ORDER_BY_FIELD_NUMBER;
    hash = (53 * hash) + getOrderBy().hashCode();
    hash = (37 * hash) + CASE_SENSITIVE_SORT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getCaseSensitiveSort());
    if (getHistogramQueriesCount() > 0) {
      hash = (37 * hash) + HISTOGRAM_QUERIES_FIELD_NUMBER;
      hash = (53 * hash) + getHistogramQueriesList().hashCode();
    }
    hash = (37 * hash) + RESULT_SET_ID_FIELD_NUMBER;
    hash = (53 * hash) + getResultSetId().hashCode();
    hash = (37 * hash) + STRICT_KEYWORDS_SEARCH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStrictKeywordsSearch());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.talent.v4beta1.SearchProfilesRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request body of the `SearchProfiles` call.
   * </pre>
   *
   * Protobuf type {@code google.cloud.talent.v4beta1.SearchProfilesRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.talent.v4beta1.SearchProfilesRequest)
      com.google.cloud.talent.v4beta1.SearchProfilesRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.talent.v4beta1.ProfileServiceProto.internal_static_google_cloud_talent_v4beta1_SearchProfilesRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.talent.v4beta1.ProfileServiceProto.internal_static_google_cloud_talent_v4beta1_SearchProfilesRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.talent.v4beta1.SearchProfilesRequest.class, com.google.cloud.talent.v4beta1.SearchProfilesRequest.Builder.class);
    }

    // Construct using com.google.cloud.talent.v4beta1.SearchProfilesRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getHistogramQueriesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      parent_ = "";

      if (requestMetadataBuilder_ == null) {
        requestMetadata_ = null;
      } else {
        requestMetadata_ = null;
        requestMetadataBuilder_ = null;
      }
      if (profileQueryBuilder_ == null) {
        profileQuery_ = null;
      } else {
        profileQuery_ = null;
        profileQueryBuilder_ = null;
      }
      pageSize_ = 0;

      pageToken_ = "";

      offset_ = 0;

      disableSpellCheck_ = false;

      orderBy_ = "";

      caseSensitiveSort_ = false;

      if (histogramQueriesBuilder_ == null) {
        histogramQueries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        histogramQueriesBuilder_.clear();
      }
      resultSetId_ = "";

      strictKeywordsSearch_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.talent.v4beta1.ProfileServiceProto.internal_static_google_cloud_talent_v4beta1_SearchProfilesRequest_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.SearchProfilesRequest getDefaultInstanceForType() {
      return com.google.cloud.talent.v4beta1.SearchProfilesRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.SearchProfilesRequest build() {
      com.google.cloud.talent.v4beta1.SearchProfilesRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.talent.v4beta1.SearchProfilesRequest buildPartial() {
      com.google.cloud.talent.v4beta1.SearchProfilesRequest result = new com.google.cloud.talent.v4beta1.SearchProfilesRequest(this);
      int from_bitField0_ = bitField0_;
      result.parent_ = parent_;
      if (requestMetadataBuilder_ == null) {
        result.requestMetadata_ = requestMetadata_;
      } else {
        result.requestMetadata_ = requestMetadataBuilder_.build();
      }
      if (profileQueryBuilder_ == null) {
        result.profileQuery_ = profileQuery_;
      } else {
        result.profileQuery_ = profileQueryBuilder_.build();
      }
      result.pageSize_ = pageSize_;
      result.pageToken_ = pageToken_;
      result.offset_ = offset_;
      result.disableSpellCheck_ = disableSpellCheck_;
      result.orderBy_ = orderBy_;
      result.caseSensitiveSort_ = caseSensitiveSort_;
      if (histogramQueriesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          histogramQueries_ = java.util.Collections.unmodifiableList(histogramQueries_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.histogramQueries_ = histogramQueries_;
      } else {
        result.histogramQueries_ = histogramQueriesBuilder_.build();
      }
      result.resultSetId_ = resultSetId_;
      result.strictKeywordsSearch_ = strictKeywordsSearch_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.talent.v4beta1.SearchProfilesRequest) {
        return mergeFrom((com.google.cloud.talent.v4beta1.SearchProfilesRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.talent.v4beta1.SearchProfilesRequest other) {
      if (other == com.google.cloud.talent.v4beta1.SearchProfilesRequest.getDefaultInstance()) return this;
      if (!other.getParent().isEmpty()) {
        parent_ = other.parent_;
        onChanged();
      }
      if (other.hasRequestMetadata()) {
        mergeRequestMetadata(other.getRequestMetadata());
      }
      if (other.hasProfileQuery()) {
        mergeProfileQuery(other.getProfileQuery());
      }
      if (other.getPageSize() != 0) {
        setPageSize(other.getPageSize());
      }
      if (!other.getPageToken().isEmpty()) {
        pageToken_ = other.pageToken_;
        onChanged();
      }
      if (other.getOffset() != 0) {
        setOffset(other.getOffset());
      }
      if (other.getDisableSpellCheck() != false) {
        setDisableSpellCheck(other.getDisableSpellCheck());
      }
      if (!other.getOrderBy().isEmpty()) {
        orderBy_ = other.orderBy_;
        onChanged();
      }
      if (other.getCaseSensitiveSort() != false) {
        setCaseSensitiveSort(other.getCaseSensitiveSort());
      }
      if (histogramQueriesBuilder_ == null) {
        if (!other.histogramQueries_.isEmpty()) {
          if (histogramQueries_.isEmpty()) {
            histogramQueries_ = other.histogramQueries_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHistogramQueriesIsMutable();
            histogramQueries_.addAll(other.histogramQueries_);
          }
          onChanged();
        }
      } else {
        if (!other.histogramQueries_.isEmpty()) {
          if (histogramQueriesBuilder_.isEmpty()) {
            histogramQueriesBuilder_.dispose();
            histogramQueriesBuilder_ = null;
            histogramQueries_ = other.histogramQueries_;
            bitField0_ = (bitField0_ & ~0x00000001);
            histogramQueriesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHistogramQueriesFieldBuilder() : null;
          } else {
            histogramQueriesBuilder_.addAllMessages(other.histogramQueries_);
          }
        }
      }
      if (!other.getResultSetId().isEmpty()) {
        resultSetId_ = other.resultSetId_;
        onChanged();
      }
      if (other.getStrictKeywordsSearch() != false) {
        setStrictKeywordsSearch(other.getStrictKeywordsSearch());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.cloud.talent.v4beta1.SearchProfilesRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.cloud.talent.v4beta1.SearchProfilesRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object parent_ = "";
    /**
     * <pre>
     * Required. The resource name of the tenant to search within.
     * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     * "projects/foo/tenants/bar".
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The parent.
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The resource name of the tenant to search within.
     * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     * "projects/foo/tenants/bar".
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The bytes for parent.
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The resource name of the tenant to search within.
     * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     * "projects/foo/tenants/bar".
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The parent to set.
     * @return This builder for chaining.
     */
    public Builder setParent(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      parent_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The resource name of the tenant to search within.
     * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     * "projects/foo/tenants/bar".
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearParent() {
      
      parent_ = getDefaultInstance().getParent();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The resource name of the tenant to search within.
     * The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     * "projects/foo/tenants/bar".
     * </pre>
     *
     * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The bytes for parent to set.
     * @return This builder for chaining.
     */
    public Builder setParentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      parent_ = value;
      onChanged();
      return this;
    }

    private com.google.cloud.talent.v4beta1.RequestMetadata requestMetadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.RequestMetadata, com.google.cloud.talent.v4beta1.RequestMetadata.Builder, com.google.cloud.talent.v4beta1.RequestMetadataOrBuilder> requestMetadataBuilder_;
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the requestMetadata field is set.
     */
    public boolean hasRequestMetadata() {
      return requestMetadataBuilder_ != null || requestMetadata_ != null;
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The requestMetadata.
     */
    public com.google.cloud.talent.v4beta1.RequestMetadata getRequestMetadata() {
      if (requestMetadataBuilder_ == null) {
        return requestMetadata_ == null ? com.google.cloud.talent.v4beta1.RequestMetadata.getDefaultInstance() : requestMetadata_;
      } else {
        return requestMetadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setRequestMetadata(com.google.cloud.talent.v4beta1.RequestMetadata value) {
      if (requestMetadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requestMetadata_ = value;
        onChanged();
      } else {
        requestMetadataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setRequestMetadata(
        com.google.cloud.talent.v4beta1.RequestMetadata.Builder builderForValue) {
      if (requestMetadataBuilder_ == null) {
        requestMetadata_ = builderForValue.build();
        onChanged();
      } else {
        requestMetadataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeRequestMetadata(com.google.cloud.talent.v4beta1.RequestMetadata value) {
      if (requestMetadataBuilder_ == null) {
        if (requestMetadata_ != null) {
          requestMetadata_ =
            com.google.cloud.talent.v4beta1.RequestMetadata.newBuilder(requestMetadata_).mergeFrom(value).buildPartial();
        } else {
          requestMetadata_ = value;
        }
        onChanged();
      } else {
        requestMetadataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearRequestMetadata() {
      if (requestMetadataBuilder_ == null) {
        requestMetadata_ = null;
        onChanged();
      } else {
        requestMetadata_ = null;
        requestMetadataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.cloud.talent.v4beta1.RequestMetadata.Builder getRequestMetadataBuilder() {
      
      onChanged();
      return getRequestMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.cloud.talent.v4beta1.RequestMetadataOrBuilder getRequestMetadataOrBuilder() {
      if (requestMetadataBuilder_ != null) {
        return requestMetadataBuilder_.getMessageOrBuilder();
      } else {
        return requestMetadata_ == null ?
            com.google.cloud.talent.v4beta1.RequestMetadata.getDefaultInstance() : requestMetadata_;
      }
    }
    /**
     * <pre>
     * Required. The meta information collected about the profile search user. This is used
     * to improve the search quality of the service. These values are provided by
     * users, and must be precise and consistent.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.RequestMetadata request_metadata = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.RequestMetadata, com.google.cloud.talent.v4beta1.RequestMetadata.Builder, com.google.cloud.talent.v4beta1.RequestMetadataOrBuilder> 
        getRequestMetadataFieldBuilder() {
      if (requestMetadataBuilder_ == null) {
        requestMetadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.talent.v4beta1.RequestMetadata, com.google.cloud.talent.v4beta1.RequestMetadata.Builder, com.google.cloud.talent.v4beta1.RequestMetadataOrBuilder>(
                getRequestMetadata(),
                getParentForChildren(),
                isClean());
        requestMetadata_ = null;
      }
      return requestMetadataBuilder_;
    }

    private com.google.cloud.talent.v4beta1.ProfileQuery profileQuery_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ProfileQuery, com.google.cloud.talent.v4beta1.ProfileQuery.Builder, com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder> profileQueryBuilder_;
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     * @return Whether the profileQuery field is set.
     */
    public boolean hasProfileQuery() {
      return profileQueryBuilder_ != null || profileQuery_ != null;
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     * @return The profileQuery.
     */
    public com.google.cloud.talent.v4beta1.ProfileQuery getProfileQuery() {
      if (profileQueryBuilder_ == null) {
        return profileQuery_ == null ? com.google.cloud.talent.v4beta1.ProfileQuery.getDefaultInstance() : profileQuery_;
      } else {
        return profileQueryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public Builder setProfileQuery(com.google.cloud.talent.v4beta1.ProfileQuery value) {
      if (profileQueryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        profileQuery_ = value;
        onChanged();
      } else {
        profileQueryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public Builder setProfileQuery(
        com.google.cloud.talent.v4beta1.ProfileQuery.Builder builderForValue) {
      if (profileQueryBuilder_ == null) {
        profileQuery_ = builderForValue.build();
        onChanged();
      } else {
        profileQueryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public Builder mergeProfileQuery(com.google.cloud.talent.v4beta1.ProfileQuery value) {
      if (profileQueryBuilder_ == null) {
        if (profileQuery_ != null) {
          profileQuery_ =
            com.google.cloud.talent.v4beta1.ProfileQuery.newBuilder(profileQuery_).mergeFrom(value).buildPartial();
        } else {
          profileQuery_ = value;
        }
        onChanged();
      } else {
        profileQueryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public Builder clearProfileQuery() {
      if (profileQueryBuilder_ == null) {
        profileQuery_ = null;
        onChanged();
      } else {
        profileQuery_ = null;
        profileQueryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.ProfileQuery.Builder getProfileQueryBuilder() {
      
      onChanged();
      return getProfileQueryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    public com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder getProfileQueryOrBuilder() {
      if (profileQueryBuilder_ != null) {
        return profileQueryBuilder_.getMessageOrBuilder();
      } else {
        return profileQuery_ == null ?
            com.google.cloud.talent.v4beta1.ProfileQuery.getDefaultInstance() : profileQuery_;
      }
    }
    /**
     * <pre>
     * Search query to execute. See [ProfileQuery][google.cloud.talent.v4beta1.ProfileQuery] for more details.
     * </pre>
     *
     * <code>.google.cloud.talent.v4beta1.ProfileQuery profile_query = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.cloud.talent.v4beta1.ProfileQuery, com.google.cloud.talent.v4beta1.ProfileQuery.Builder, com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder> 
        getProfileQueryFieldBuilder() {
      if (profileQueryBuilder_ == null) {
        profileQueryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.talent.v4beta1.ProfileQuery, com.google.cloud.talent.v4beta1.ProfileQuery.Builder, com.google.cloud.talent.v4beta1.ProfileQueryOrBuilder>(
                getProfileQuery(),
                getParentForChildren(),
                isClean());
        profileQuery_ = null;
      }
      return profileQueryBuilder_;
    }

    private int pageSize_ ;
    /**
     * <pre>
     * A limit on the number of profiles returned in the search results.
     * A value above the default value 10 can increase search response time.
     * The maximum value allowed is 100. Otherwise an error is thrown.
     * </pre>
     *
     * <code>int32 page_size = 4;</code>
     * @return The pageSize.
     */
    @java.lang.Override
    public int getPageSize() {
      return pageSize_;
    }
    /**
     * <pre>
     * A limit on the number of profiles returned in the search results.
     * A value above the default value 10 can increase search response time.
     * The maximum value allowed is 100. Otherwise an error is thrown.
     * </pre>
     *
     * <code>int32 page_size = 4;</code>
     * @param value The pageSize to set.
     * @return This builder for chaining.
     */
    public Builder setPageSize(int value) {
      
      pageSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A limit on the number of profiles returned in the search results.
     * A value above the default value 10 can increase search response time.
     * The maximum value allowed is 100. Otherwise an error is thrown.
     * </pre>
     *
     * <code>int32 page_size = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPageSize() {
      
      pageSize_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object pageToken_ = "";
    /**
     * <pre>
     * The pageToken, similar to offset enables users of the API to paginate
     * through the search results. To retrieve the first page of results, set the
     * pageToken to empty. The search response includes a
     * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
     * used to populate the pageToken field for the next page of results. Using
     * pageToken instead of offset increases the performance of the API,
     * especially compared to larger offset values.
     * </pre>
     *
     * <code>string page_token = 5;</code>
     * @return The pageToken.
     */
    public java.lang.String getPageToken() {
      java.lang.Object ref = pageToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pageToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The pageToken, similar to offset enables users of the API to paginate
     * through the search results. To retrieve the first page of results, set the
     * pageToken to empty. The search response includes a
     * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
     * used to populate the pageToken field for the next page of results. Using
     * pageToken instead of offset increases the performance of the API,
     * especially compared to larger offset values.
     * </pre>
     *
     * <code>string page_token = 5;</code>
     * @return The bytes for pageToken.
     */
    public com.google.protobuf.ByteString
        getPageTokenBytes() {
      java.lang.Object ref = pageToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pageToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The pageToken, similar to offset enables users of the API to paginate
     * through the search results. To retrieve the first page of results, set the
     * pageToken to empty. The search response includes a
     * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
     * used to populate the pageToken field for the next page of results. Using
     * pageToken instead of offset increases the performance of the API,
     * especially compared to larger offset values.
     * </pre>
     *
     * <code>string page_token = 5;</code>
     * @param value The pageToken to set.
     * @return This builder for chaining.
     */
    public Builder setPageToken(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pageToken_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The pageToken, similar to offset enables users of the API to paginate
     * through the search results. To retrieve the first page of results, set the
     * pageToken to empty. The search response includes a
     * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
     * used to populate the pageToken field for the next page of results. Using
     * pageToken instead of offset increases the performance of the API,
     * especially compared to larger offset values.
     * </pre>
     *
     * <code>string page_token = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPageToken() {
      
      pageToken_ = getDefaultInstance().getPageToken();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The pageToken, similar to offset enables users of the API to paginate
     * through the search results. To retrieve the first page of results, set the
     * pageToken to empty. The search response includes a
     * [nextPageToken][google.cloud.talent.v4beta1.SearchProfilesResponse.next_page_token] field that can be
     * used to populate the pageToken field for the next page of results. Using
     * pageToken instead of offset increases the performance of the API,
     * especially compared to larger offset values.
     * </pre>
     *
     * <code>string page_token = 5;</code>
     * @param value The bytes for pageToken to set.
     * @return This builder for chaining.
     */
    public Builder setPageTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pageToken_ = value;
      onChanged();
      return this;
    }

    private int offset_ ;
    /**
     * <pre>
     * An integer that specifies the current offset (that is, starting result) in
     * search results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token] is unset.
     * The maximum allowed value is 5000. Otherwise an error is thrown.
     * For example, 0 means to search from the first profile, and 10 means to
     * search from the 11th profile. This can be used for pagination, for example
     * pageSize = 10 and offset = 10 means to search from the second page.
     * </pre>
     *
     * <code>int32 offset = 6;</code>
     * @return The offset.
     */
    @java.lang.Override
    public int getOffset() {
      return offset_;
    }
    /**
     * <pre>
     * An integer that specifies the current offset (that is, starting result) in
     * search results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token] is unset.
     * The maximum allowed value is 5000. Otherwise an error is thrown.
     * For example, 0 means to search from the first profile, and 10 means to
     * search from the 11th profile. This can be used for pagination, for example
     * pageSize = 10 and offset = 10 means to search from the second page.
     * </pre>
     *
     * <code>int32 offset = 6;</code>
     * @param value The offset to set.
     * @return This builder for chaining.
     */
    public Builder setOffset(int value) {
      
      offset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An integer that specifies the current offset (that is, starting result) in
     * search results. This field is only considered if [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token] is unset.
     * The maximum allowed value is 5000. Otherwise an error is thrown.
     * For example, 0 means to search from the first profile, and 10 means to
     * search from the 11th profile. This can be used for pagination, for example
     * pageSize = 10 and offset = 10 means to search from the second page.
     * </pre>
     *
     * <code>int32 offset = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearOffset() {
      
      offset_ = 0;
      onChanged();
      return this;
    }

    private boolean disableSpellCheck_ ;
    /**
     * <pre>
     * This flag controls the spell-check feature. If `false`, the
     * service attempts to correct a misspelled query.
     * For example, "enginee" is corrected to "engineer".
     * </pre>
     *
     * <code>bool disable_spell_check = 7;</code>
     * @return The disableSpellCheck.
     */
    @java.lang.Override
    public boolean getDisableSpellCheck() {
      return disableSpellCheck_;
    }
    /**
     * <pre>
     * This flag controls the spell-check feature. If `false`, the
     * service attempts to correct a misspelled query.
     * For example, "enginee" is corrected to "engineer".
     * </pre>
     *
     * <code>bool disable_spell_check = 7;</code>
     * @param value The disableSpellCheck to set.
     * @return This builder for chaining.
     */
    public Builder setDisableSpellCheck(boolean value) {
      
      disableSpellCheck_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This flag controls the spell-check feature. If `false`, the
     * service attempts to correct a misspelled query.
     * For example, "enginee" is corrected to "engineer".
     * </pre>
     *
     * <code>bool disable_spell_check = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableSpellCheck() {
      
      disableSpellCheck_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object orderBy_ = "";
    /**
     * <pre>
     * The criteria that determines how search results are sorted.
     * Defaults is "relevance desc" if no value is specified.
     * Supported options are:
     * * "relevance desc": By descending relevance, as determined by the API
     *    algorithms.
     * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
     *   (recently updated profiles first).
     * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
     *   (recently created profiles first).
     * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
     *   ascending order.
     * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
     *   in descending order.
     * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
     *   ascending order.
     * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
     *   in ascending order.
     * </pre>
     *
     * <code>string order_by = 8;</code>
     * @return The orderBy.
     */
    public java.lang.String getOrderBy() {
      java.lang.Object ref = orderBy_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        orderBy_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The criteria that determines how search results are sorted.
     * Defaults is "relevance desc" if no value is specified.
     * Supported options are:
     * * "relevance desc": By descending relevance, as determined by the API
     *    algorithms.
     * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
     *   (recently updated profiles first).
     * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
     *   (recently created profiles first).
     * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
     *   ascending order.
     * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
     *   in descending order.
     * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
     *   ascending order.
     * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
     *   in ascending order.
     * </pre>
     *
     * <code>string order_by = 8;</code>
     * @return The bytes for orderBy.
     */
    public com.google.protobuf.ByteString
        getOrderByBytes() {
      java.lang.Object ref = orderBy_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        orderBy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The criteria that determines how search results are sorted.
     * Defaults is "relevance desc" if no value is specified.
     * Supported options are:
     * * "relevance desc": By descending relevance, as determined by the API
     *    algorithms.
     * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
     *   (recently updated profiles first).
     * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
     *   (recently created profiles first).
     * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
     *   ascending order.
     * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
     *   in descending order.
     * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
     *   ascending order.
     * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
     *   in ascending order.
     * </pre>
     *
     * <code>string order_by = 8;</code>
     * @param value The orderBy to set.
     * @return This builder for chaining.
     */
    public Builder setOrderBy(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      orderBy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The criteria that determines how search results are sorted.
     * Defaults is "relevance desc" if no value is specified.
     * Supported options are:
     * * "relevance desc": By descending relevance, as determined by the API
     *    algorithms.
     * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
     *   (recently updated profiles first).
     * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
     *   (recently created profiles first).
     * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
     *   ascending order.
     * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
     *   in descending order.
     * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
     *   ascending order.
     * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
     *   in ascending order.
     * </pre>
     *
     * <code>string order_by = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearOrderBy() {
      
      orderBy_ = getDefaultInstance().getOrderBy();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The criteria that determines how search results are sorted.
     * Defaults is "relevance desc" if no value is specified.
     * Supported options are:
     * * "relevance desc": By descending relevance, as determined by the API
     *    algorithms.
     * * "update_date desc": Sort by [Profile.update_time][google.cloud.talent.v4beta1.Profile.update_time] in descending order
     *   (recently updated profiles first).
     * * "create_date desc": Sort by [Profile.create_time][google.cloud.talent.v4beta1.Profile.create_time] in descending order
     *   (recently created profiles first).
     * * "first_name": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name] in
     *   ascending order.
     * * "first_name desc": Sort by [PersonName.PersonStructuredName.given_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.given_name]
     *   in descending order.
     * * "last_name": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name] in
     *   ascending order.
     * * "last_name desc": Sort by [PersonName.PersonStructuredName.family_name][google.cloud.talent.v4beta1.PersonName.PersonStructuredName.family_name]
     *   in ascending order.
     * </pre>
     *
     * <code>string order_by = 8;</code>
     * @param value The bytes for orderBy to set.
     * @return This builder for chaining.
     */
    public Builder setOrderByBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      orderBy_ = value;
      onChanged();
      return this;
    }

    private boolean caseSensitiveSort_ ;
    /**
     * <pre>
     * When sort by field is based on alphabetical order, sort values case
     * sensitively (based on ASCII) when the value is set to true. Default value
     * is case in-sensitive sort (false).
     * </pre>
     *
     * <code>bool case_sensitive_sort = 9;</code>
     * @return The caseSensitiveSort.
     */
    @java.lang.Override
    public boolean getCaseSensitiveSort() {
      return caseSensitiveSort_;
    }
    /**
     * <pre>
     * When sort by field is based on alphabetical order, sort values case
     * sensitively (based on ASCII) when the value is set to true. Default value
     * is case in-sensitive sort (false).
     * </pre>
     *
     * <code>bool case_sensitive_sort = 9;</code>
     * @param value The caseSensitiveSort to set.
     * @return This builder for chaining.
     */
    public Builder setCaseSensitiveSort(boolean value) {
      
      caseSensitiveSort_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When sort by field is based on alphabetical order, sort values case
     * sensitively (based on ASCII) when the value is set to true. Default value
     * is case in-sensitive sort (false).
     * </pre>
     *
     * <code>bool case_sensitive_sort = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearCaseSensitiveSort() {
      
      caseSensitiveSort_ = false;
      onChanged();
      return this;
    }

    private java.util.List<com.google.cloud.talent.v4beta1.HistogramQuery> histogramQueries_ =
      java.util.Collections.emptyList();
    private void ensureHistogramQueriesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        histogramQueries_ = new java.util.ArrayList<com.google.cloud.talent.v4beta1.HistogramQuery>(histogramQueries_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.HistogramQuery, com.google.cloud.talent.v4beta1.HistogramQuery.Builder, com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder> histogramQueriesBuilder_;

    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.HistogramQuery> getHistogramQueriesList() {
      if (histogramQueriesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(histogramQueries_);
      } else {
        return histogramQueriesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public int getHistogramQueriesCount() {
      if (histogramQueriesBuilder_ == null) {
        return histogramQueries_.size();
      } else {
        return histogramQueriesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.HistogramQuery getHistogramQueries(int index) {
      if (histogramQueriesBuilder_ == null) {
        return histogramQueries_.get(index);
      } else {
        return histogramQueriesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder setHistogramQueries(
        int index, com.google.cloud.talent.v4beta1.HistogramQuery value) {
      if (histogramQueriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistogramQueriesIsMutable();
        histogramQueries_.set(index, value);
        onChanged();
      } else {
        histogramQueriesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder setHistogramQueries(
        int index, com.google.cloud.talent.v4beta1.HistogramQuery.Builder builderForValue) {
      if (histogramQueriesBuilder_ == null) {
        ensureHistogramQueriesIsMutable();
        histogramQueries_.set(index, builderForValue.build());
        onChanged();
      } else {
        histogramQueriesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder addHistogramQueries(com.google.cloud.talent.v4beta1.HistogramQuery value) {
      if (histogramQueriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistogramQueriesIsMutable();
        histogramQueries_.add(value);
        onChanged();
      } else {
        histogramQueriesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder addHistogramQueries(
        int index, com.google.cloud.talent.v4beta1.HistogramQuery value) {
      if (histogramQueriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistogramQueriesIsMutable();
        histogramQueries_.add(index, value);
        onChanged();
      } else {
        histogramQueriesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder addHistogramQueries(
        com.google.cloud.talent.v4beta1.HistogramQuery.Builder builderForValue) {
      if (histogramQueriesBuilder_ == null) {
        ensureHistogramQueriesIsMutable();
        histogramQueries_.add(builderForValue.build());
        onChanged();
      } else {
        histogramQueriesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder addHistogramQueries(
        int index, com.google.cloud.talent.v4beta1.HistogramQuery.Builder builderForValue) {
      if (histogramQueriesBuilder_ == null) {
        ensureHistogramQueriesIsMutable();
        histogramQueries_.add(index, builderForValue.build());
        onChanged();
      } else {
        histogramQueriesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder addAllHistogramQueries(
        java.lang.Iterable<? extends com.google.cloud.talent.v4beta1.HistogramQuery> values) {
      if (histogramQueriesBuilder_ == null) {
        ensureHistogramQueriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, histogramQueries_);
        onChanged();
      } else {
        histogramQueriesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder clearHistogramQueries() {
      if (histogramQueriesBuilder_ == null) {
        histogramQueries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        histogramQueriesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public Builder removeHistogramQueries(int index) {
      if (histogramQueriesBuilder_ == null) {
        ensureHistogramQueriesIsMutable();
        histogramQueries_.remove(index);
        onChanged();
      } else {
        histogramQueriesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.HistogramQuery.Builder getHistogramQueriesBuilder(
        int index) {
      return getHistogramQueriesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder getHistogramQueriesOrBuilder(
        int index) {
      if (histogramQueriesBuilder_ == null) {
        return histogramQueries_.get(index);  } else {
        return histogramQueriesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public java.util.List<? extends com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder> 
         getHistogramQueriesOrBuilderList() {
      if (histogramQueriesBuilder_ != null) {
        return histogramQueriesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(histogramQueries_);
      }
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.HistogramQuery.Builder addHistogramQueriesBuilder() {
      return getHistogramQueriesFieldBuilder().addBuilder(
          com.google.cloud.talent.v4beta1.HistogramQuery.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public com.google.cloud.talent.v4beta1.HistogramQuery.Builder addHistogramQueriesBuilder(
        int index) {
      return getHistogramQueriesFieldBuilder().addBuilder(
          index, com.google.cloud.talent.v4beta1.HistogramQuery.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of expressions specifies histogram requests against matching
     * profiles for [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest].
     * The expression syntax looks like a function definition with parameters.
     * Function syntax: function_name(histogram_facet[, list of buckets])
     * Data types:
     * * Histogram facet: facet names with format [a-zA-Z][a-zA-Z0-9_]+.
     * * String: string like "any string with backslash escape for quote(&#92;")."
     * * Number: whole number and floating point number like 10, -1 and -0.01.
     * * List: list of elements with comma(,) separator surrounded by square
     * brackets. For example, [1, 2, 3] and ["one", "two", "three"].
     * Built-in constants:
     * * MIN (minimum number similar to java Double.MIN_VALUE)
     * * MAX (maximum number similar to java Double.MAX_VALUE)
     * Built-in functions:
     * * bucket(start, end[, label])
     * Bucket build-in function creates a bucket with range of [start, end). Note
     * that the end is exclusive.
     * For example, bucket(1, MAX, "positive number") or bucket(1, 10).
     * Histogram Facets:
     * * admin1: Admin1 is a global placeholder for referring to state, province,
     * or the particular term a country uses to define the geographic structure
     * below the country level. Examples include states codes such as "CA", "IL",
     * "NY", and provinces, such as "BC".
     * * locality: Locality is a global placeholder for referring to city, town,
     * or the particular term a country uses to define the geographic structure
     * below the admin1 level. Examples include city names such as
     * "Mountain View" and "New York".
     * * extended_locality: Extended locality is concatenated version of admin1
     * and locality with comma separator. For example, "Mountain View, CA" and
     * "New York, NY".
     * * postal_code: Postal code of profile which follows locale code.
     * * country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,
     *  JP, GB.
     * * job_title: Normalized job titles specified in EmploymentHistory.
     * * company_name: Normalized company name of profiles to match on.
     * * institution: The school name. For example, "MIT",
     * "University of California, Berkeley"
     * * degree: Highest education degree in ISCED code. Each value in degree
     * covers a specific level of education, without any expansion to upper nor
     * lower levels of education degree.
     * * experience_in_months: experience in months. 0 means 0 month to 1 month
     * (exclusive).
     * * application_date: The application date specifies application start dates.
     * See [ApplicationDateFilter][google.cloud.talent.v4beta1.ApplicationDateFilter] for more details.
     * * application_outcome_notes: The application outcome reason specifies the
     * reasons behind the outcome of the job application.
     * See [ApplicationOutcomeNotesFilter][google.cloud.talent.v4beta1.ApplicationOutcomeNotesFilter] for more details.
     * * application_job_title: The application job title specifies the job
     * applied for in the application.
     * See [ApplicationJobFilter][google.cloud.talent.v4beta1.ApplicationJobFilter] for more details.
     * * hirable_status: Hirable status specifies the profile's hirable status.
     * * string_custom_attribute: String custom attributes. Values can be accessed
     * via square bracket notation like string_custom_attribute["key1"].
     * * numeric_custom_attribute: Numeric custom attributes. Values can be
     * accessed via square bracket notation like numeric_custom_attribute["key1"].
     * Example expressions:
     * * count(admin1)
     * * count(experience_in_months, [bucket(0, 12, "1 year"),
     * bucket(12, 36, "1-3 years"), bucket(36, MAX, "3+ years")])
     * * count(string_custom_attribute["assigned_recruiter"])
     * * count(numeric_custom_attribute["favorite_number"],
     * [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
     * </pre>
     *
     * <code>repeated .google.cloud.talent.v4beta1.HistogramQuery histogram_queries = 10;</code>
     */
    public java.util.List<com.google.cloud.talent.v4beta1.HistogramQuery.Builder> 
         getHistogramQueriesBuilderList() {
      return getHistogramQueriesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.cloud.talent.v4beta1.HistogramQuery, com.google.cloud.talent.v4beta1.HistogramQuery.Builder, com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder> 
        getHistogramQueriesFieldBuilder() {
      if (histogramQueriesBuilder_ == null) {
        histogramQueriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.talent.v4beta1.HistogramQuery, com.google.cloud.talent.v4beta1.HistogramQuery.Builder, com.google.cloud.talent.v4beta1.HistogramQueryOrBuilder>(
                histogramQueries_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        histogramQueries_ = null;
      }
      return histogramQueriesBuilder_;
    }

    private java.lang.Object resultSetId_ = "";
    /**
     * <pre>
     * An id that uniquely identifies the result set of a
     * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
     * retrieved from the
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
     * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
     * A result set is an ordered list of search results.
     * If this field is not set, a new result set is computed based on the
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
     * access this result set.
     * If this field is set, the service will ignore the resource and
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
     * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
     * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
     * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
     * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
     * </pre>
     *
     * <code>string result_set_id = 12;</code>
     * @return The resultSetId.
     */
    public java.lang.String getResultSetId() {
      java.lang.Object ref = resultSetId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        resultSetId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * An id that uniquely identifies the result set of a
     * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
     * retrieved from the
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
     * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
     * A result set is an ordered list of search results.
     * If this field is not set, a new result set is computed based on the
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
     * access this result set.
     * If this field is set, the service will ignore the resource and
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
     * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
     * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
     * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
     * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
     * </pre>
     *
     * <code>string result_set_id = 12;</code>
     * @return The bytes for resultSetId.
     */
    public com.google.protobuf.ByteString
        getResultSetIdBytes() {
      java.lang.Object ref = resultSetId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resultSetId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * An id that uniquely identifies the result set of a
     * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
     * retrieved from the
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
     * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
     * A result set is an ordered list of search results.
     * If this field is not set, a new result set is computed based on the
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
     * access this result set.
     * If this field is set, the service will ignore the resource and
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
     * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
     * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
     * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
     * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
     * </pre>
     *
     * <code>string result_set_id = 12;</code>
     * @param value The resultSetId to set.
     * @return This builder for chaining.
     */
    public Builder setResultSetId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      resultSetId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An id that uniquely identifies the result set of a
     * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
     * retrieved from the
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
     * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
     * A result set is an ordered list of search results.
     * If this field is not set, a new result set is computed based on the
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
     * access this result set.
     * If this field is set, the service will ignore the resource and
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
     * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
     * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
     * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
     * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
     * </pre>
     *
     * <code>string result_set_id = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearResultSetId() {
      
      resultSetId_ = getDefaultInstance().getResultSetId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An id that uniquely identifies the result set of a
     * [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles] call. The id should be
     * retrieved from the
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] message returned from a previous
     * invocation of [SearchProfiles][google.cloud.talent.v4beta1.ProfileService.SearchProfiles].
     * A result set is an ordered list of search results.
     * If this field is not set, a new result set is computed based on the
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query].  A new [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] is returned as a handle to
     * access this result set.
     * If this field is set, the service will ignore the resource and
     * [profile_query][google.cloud.talent.v4beta1.SearchProfilesRequest.profile_query] values, and simply retrieve a page of results from the
     * corresponding result set.  In this case, one and only one of [page_token][google.cloud.talent.v4beta1.SearchProfilesRequest.page_token]
     * or [offset][google.cloud.talent.v4beta1.SearchProfilesRequest.offset] must be set.
     * A typical use case is to invoke [SearchProfilesRequest][google.cloud.talent.v4beta1.SearchProfilesRequest] without this
     * field, then use the resulting [result_set_id][google.cloud.talent.v4beta1.SearchProfilesRequest.result_set_id] in
     * [SearchProfilesResponse][google.cloud.talent.v4beta1.SearchProfilesResponse] to page through the results.
     * </pre>
     *
     * <code>string result_set_id = 12;</code>
     * @param value The bytes for resultSetId to set.
     * @return This builder for chaining.
     */
    public Builder setResultSetIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      resultSetId_ = value;
      onChanged();
      return this;
    }

    private boolean strictKeywordsSearch_ ;
    /**
     * <pre>
     * This flag is used to indicate whether the service will attempt to
     * understand synonyms and terms related to the search query or treat the
     * query "as is" when it generates a set of results. By default this flag is
     * set to false, thus allowing expanded results to also be returned. For
     * example a search for "software engineer" might also return candidates who
     * have experience in jobs similar to software engineer positions. By setting
     * this flag to true, the service will only attempt to deliver candidates has
     * software engineer in his/her global fields by treating "software engineer"
     * as a keyword.
     * It is recommended to provide a feature in the UI (such as a checkbox) to
     * allow recruiters to set this flag to true if they intend to search for
     * longer boolean strings.
     * </pre>
     *
     * <code>bool strict_keywords_search = 13;</code>
     * @return The strictKeywordsSearch.
     */
    @java.lang.Override
    public boolean getStrictKeywordsSearch() {
      return strictKeywordsSearch_;
    }
    /**
     * <pre>
     * This flag is used to indicate whether the service will attempt to
     * understand synonyms and terms related to the search query or treat the
     * query "as is" when it generates a set of results. By default this flag is
     * set to false, thus allowing expanded results to also be returned. For
     * example a search for "software engineer" might also return candidates who
     * have experience in jobs similar to software engineer positions. By setting
     * this flag to true, the service will only attempt to deliver candidates has
     * software engineer in his/her global fields by treating "software engineer"
     * as a keyword.
     * It is recommended to provide a feature in the UI (such as a checkbox) to
     * allow recruiters to set this flag to true if they intend to search for
     * longer boolean strings.
     * </pre>
     *
     * <code>bool strict_keywords_search = 13;</code>
     * @param value The strictKeywordsSearch to set.
     * @return This builder for chaining.
     */
    public Builder setStrictKeywordsSearch(boolean value) {
      
      strictKeywordsSearch_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This flag is used to indicate whether the service will attempt to
     * understand synonyms and terms related to the search query or treat the
     * query "as is" when it generates a set of results. By default this flag is
     * set to false, thus allowing expanded results to also be returned. For
     * example a search for "software engineer" might also return candidates who
     * have experience in jobs similar to software engineer positions. By setting
     * this flag to true, the service will only attempt to deliver candidates has
     * software engineer in his/her global fields by treating "software engineer"
     * as a keyword.
     * It is recommended to provide a feature in the UI (such as a checkbox) to
     * allow recruiters to set this flag to true if they intend to search for
     * longer boolean strings.
     * </pre>
     *
     * <code>bool strict_keywords_search = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearStrictKeywordsSearch() {
      
      strictKeywordsSearch_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.talent.v4beta1.SearchProfilesRequest)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.talent.v4beta1.SearchProfilesRequest)
  private static final com.google.cloud.talent.v4beta1.SearchProfilesRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.talent.v4beta1.SearchProfilesRequest();
  }

  public static com.google.cloud.talent.v4beta1.SearchProfilesRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SearchProfilesRequest>
      PARSER = new com.google.protobuf.AbstractParser<SearchProfilesRequest>() {
    @java.lang.Override
    public SearchProfilesRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SearchProfilesRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SearchProfilesRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SearchProfilesRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.talent.v4beta1.SearchProfilesRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

